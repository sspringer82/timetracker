<<<<<<< HEAD
(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"@media(max-width: 960px){body{flex-direction:column-reverse}body form{display:flex}body form #from,body form #until,body form #date{width:70px}body form label{display:none}}body{display:flex}form{order:2;padding-left:20px}form label{display:inline-block;width:50px}form fieldset{border:none}table{border-collapse:collapse}table tr.header td{font-weight:bold}table tr.footer{border-top:1px solid #000;border-bottom:3px solid #000}table tr th{border-bottom:1px solid #000}table tr td{padding:5px 10px}table tr:nth-child(2n) td{background:#e8e8e8}","",{version:3,sources:["webpack://src/style.scss"],names:[],mappings:"AAAA,yBACE,KACE,6BAAA,CACA,UACE,YAAA,CAEA,iDAGE,UAAA,CAEF,gBACE,YAAA,CAAA,CAMR,KACE,YAAA,CAGF,KACE,OAAA,CAEA,iBAAA,CAEA,WACE,oBAAA,CACA,UAAA,CAGF,cACE,WAAA,CAIJ,MACE,wBAAA,CAII,mBACE,gBAAA,CAIJ,gBACE,yBAAA,CACA,4BAAA,CAGF,YACE,4BAAA,CAKF,YACE,gBAAA,CAKF,0BACE,kBAAA",sourcesContent:["@media (max-width: 960px) {\n  body {\n    flex-direction: column-reverse;\n    form {\n      display: flex;\n\n      #from,\n      #until,\n      #date {\n        width: 70px;\n      }\n      label {\n        display: none;\n      }\n    }\n  }\n}\n\nbody {\n  display: flex;\n}\n\nform {\n  order: 2;\n\n  padding-left: 20px;\n\n  label {\n    display: inline-block;\n    width: 50px;\n  }\n\n  fieldset {\n    border: none;\n  }\n}\n\ntable {\n  border-collapse: collapse;\n\n  tr {\n    &.header {\n      td {\n        font-weight: bold;\n      }\n    }\n\n    &.footer {\n      border-top: 1px solid black;\n      border-bottom: 3px solid black;\n    }\n\n    th {\n      border-bottom: 1px solid black;\n    }\n  }\n\n  tr {\n    td {\n      padding: 5px 10px;\n    }\n  }\n\n  tr:nth-child(2n) {\n    td {\n      background: #e8e8e8;\n    }\n  }\n}\n"],sourceRoot:""}]);const u=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var s=[].concat(e[u]);r&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),c="/*# ".concat(s," */"),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var u=e[o],s=t.base?u[0]+t.base:u[0],c=n[s]||0,l="".concat(s," ").concat(c);n[s]=c+1;var f=a(l),h={css:u[1],media:u[2],sourceMap:u[3]};-1!==f?(i[f].references++,i[f].updater(h)):i.push({identifier:l,updater:y(h,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function h(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var d=null,p=0;function y(e,t){var n,r,o;if(t.singleton){var i=p++;n=d||(d=s(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=s(t),r=h.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var s=u(e,t),c=0;c<n.length;c++){var l=a(n[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=s}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(n,r){e(2,arguments);var o=t(n),i=t(r);return o.getTime()-i.getTime()}function o(t,n){e(2,arguments);var o=r(t,n)/1e3;return o>0?Math.floor(o):Math.ceil(o)}function i(e){var t=Math.abs(Math.floor(e/60)%60),n=Math.abs(Math.floor(e/3600));return isNaN(t)||isNaN(n)?"00:00":(n<10?"0"+n:n)+":"+(t<10?"0"+t:t)}const a=function(){function e(e,t,n){this.form=e,this.logModel=t,this.table=n}return e.prototype.init=function(){this.form.addEventListener("submit",this.handleSave.bind(this)),document.querySelector("#from").addEventListener("change",this.handleChange.bind(this)),document.querySelector("#until").addEventListener("change",this.handleChange.bind(this))},e.prototype.handleChange=function(){var e=document.querySelector("#from").value,t=document.querySelector("#until").value,n=o(new Date("1970-01-01T"+t+":00"),new Date("1970-01-01T"+e+":00"));document.querySelector("output").innerText=i(n)},e.prototype.clearForm=function(){document.querySelector("#project").value="",document.querySelector("#date").value="",document.querySelector("#from").value="",document.querySelector("#until").value=""},e.prototype.handleSave=function(e){return t=this,n=void 0,o=function(){var t,n,r,o,i;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}(this,(function(a){switch(a.label){case 0:return e.preventDefault(),t=document.querySelector("#project").value,n=document.querySelector("#date").value,r=document.querySelector("#from").value,o=document.querySelector("#until").value,i={project:t,from:new Date(n+"T"+r).getTime(),until:new Date(n+"T"+o).getTime()},[4,this.logModel.createLog(i)];case 1:return a.sent(),this.table.render(),this.clearForm(),[2]}}))},new((r=void 0)||(r=Promise))((function(e,i){function a(e){try{s(o.next(e))}catch(e){i(e)}}function u(e){try{s(o.throw(e))}catch(e){i(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,u)}s((o=o.apply(t,n||[])).next())}));var t,n,r,o},e}();function u(n){e(1,arguments);var r=t(n);return r.setHours(0,0,0,0),r}var s=function(){return(s=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function c(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r}var l=Object.keys,f=Array.isArray,h="undefined"!=typeof self?self:"undefined"!=typeof window?window:global;function d(e,t){return"object"!=typeof t||l(t).forEach((function(n){e[n]=t[n]})),e}"undefined"==typeof Promise||h.Promise||(h.Promise=Promise);var p=Object.getPrototypeOf,y={}.hasOwnProperty;function m(e,t){return y.call(e,t)}function v(e,t){"function"==typeof t&&(t=t(p(e))),l(t).forEach((function(n){b(e,n,t[n])}))}var g=Object.defineProperty;function b(e,t,n,r){g(e,t,d(n&&m(n,"get")&&"function"==typeof n.get?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},r))}function w(e){return{from:function(t){return e.prototype=Object.create(t.prototype),b(e.prototype,"constructor",e),{extend:v.bind(null,e.prototype)}}}}var _=Object.getOwnPropertyDescriptor;function x(e,t){var n;return _(e,t)||(n=p(e))&&x(n,t)}var k=[].slice;function C(e,t,n){return k.call(e,t,n)}function A(e,t){return t(e)}function T(e){if(!e)throw new Error("Assertion Failed")}function E(e){h.setImmediate?setImmediate(e):setTimeout(e,0)}function S(e,t){return e.reduce((function(e,n,r){var o=t(n,r);return o&&(e[o[0]]=o[1]),e}),{})}function P(e,t){if(m(e,t))return e[t];if(!t)return e;if("string"!=typeof t){for(var n=[],r=0,o=t.length;r<o;++r){var i=P(e,t[r]);n.push(i)}return n}var a=t.indexOf(".");if(-1!==a){var u=e[t.substr(0,a)];return void 0===u?void 0:P(u,t.substr(a+1))}}function O(e,t,n){if(e&&void 0!==t&&(!("isFrozen"in Object)||!Object.isFrozen(e)))if("string"!=typeof t&&"length"in t){T("string"!=typeof n&&"length"in n);for(var r=0,o=t.length;r<o;++r)O(e,t[r],n[r])}else{var i=t.indexOf(".");if(-1!==i){var a=t.substr(0,i),u=t.substr(i+1);if(""===u)void 0===n?f(e)&&!isNaN(parseInt(a))?e.splice(a,1):delete e[a]:e[a]=n;else{var s=e[a];s||(s=e[a]={}),O(s,u,n)}}else void 0===n?f(e)&&!isNaN(parseInt(t))?e.splice(t,1):delete e[t]:e[t]=n}}function M(e){var t={};for(var n in e)m(e,n)&&(t[n]=e[n]);return t}var D=[].concat;function j(e){return D.apply([],e)}var B="Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set".split(",").concat(j([8,16,32,64].map((function(e){return["Int","Uint","Float"].map((function(t){return t+e+"Array"}))})))).filter((function(e){return h[e]})),K=B.map((function(e){return h[e]})),q=S(B,(function(e){return[e,!0]}));function I(e){if(!e||"object"!=typeof e)return e;var t;if(f(e)){t=[];for(var n=0,r=e.length;n<r;++n)t.push(I(e[n]))}else if(K.indexOf(e.constructor)>=0)t=e;else for(var o in t=e.constructor?Object.create(e.constructor.prototype):{},e)m(e,o)&&(t[o]=I(e[o]));return t}var N={}.toString;function R(e){return N.call(e).slice(8,-1)}var F=function(e,t){return"Array"===t?""+e.map((function(e){return F(e,R(e))})):"ArrayBuffer"===t?""+new Uint8Array(e):"Date"===t?e.getTime():ArrayBuffer.isView(e)?""+new Uint8Array(e.buffer):e};function U(e,t,n,r){return n=n||{},r=r||"",l(e).forEach((function(o){if(m(t,o)){var i=e[o],a=t[o];if("object"==typeof i&&"object"==typeof a&&i&&a){var u=R(i),s=R(a);u===s?q[u]?F(i,u)!==F(a,s)&&(n[r+o]=t[o]):U(i,a,n,r+o+"."):n[r+o]=t[o]}else i!==a&&(n[r+o]=t[o])}else n[r+o]=void 0})),l(t).forEach((function(o){m(e,o)||(n[r+o]=t[o])})),n}var W="undefined"!=typeof Symbol&&Symbol.iterator,L=W?function(e){var t;return null!=e&&(t=e[W])&&t.apply(e)}:function(){return null},Y={};function z(e){var t,n,r,o;if(1===arguments.length){if(f(e))return e.slice();if(this===Y&&"string"==typeof e)return[e];if(o=L(e)){for(n=[];!(r=o.next()).done;)n.push(r.value);return n}if(null==e)return[e];if("number"==typeof(t=e.length)){for(n=new Array(t);t--;)n[t]=e[t];return n}return[e]}for(t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return n}var H="undefined"!=typeof Symbol?function(e){return"AsyncFunction"===e[Symbol.toStringTag]}:function(){return!1},G="undefined"!=typeof location&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function X(e,t){G=e,Q=t}var Q=function(){return!0},V=!new Error("").stack;function J(){if(V)try{throw new Error}catch(e){return e}return new Error}function Z(e,t){var n=e.stack;return n?(t=t||0,0===n.indexOf(e.name)&&(t+=(e.name+e.message).split("\n").length),n.split("\n").slice(t).filter(Q).map((function(e){return"\n"+e})).join("")):""}var $=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],ee=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"].concat($),te={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed"};function ne(e,t){this._e=J(),this.name=e,this.message=t}function re(e,t){return e+". Errors: "+Object.keys(t).map((function(e){return t[e].toString()})).filter((function(e,t,n){return n.indexOf(e)===t})).join("\n")}function oe(e,t,n,r){this._e=J(),this.failures=t,this.failedKeys=r,this.successCount=n,this.message=re(e,t)}function ie(e,t){this._e=J(),this.name="BulkError",this.failures=t,this.message=re(e,t)}w(ne).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+Z(this._e,2))}},toString:function(){return this.name+": "+this.message}}),w(oe).from(ne),w(ie).from(ne);var ae=ee.reduce((function(e,t){return e[t]=t+"Error",e}),{}),ue=ne,se=ee.reduce((function(e,t){var n=t+"Error";function r(e,r){this._e=J(),this.name=n,e?"string"==typeof e?(this.message=e+(r?"\n "+r:""),this.inner=r||null):"object"==typeof e&&(this.message=e.name+" "+e.message,this.inner=e):(this.message=te[t]||n,this.inner=null)}return w(r).from(ue),e[t]=r,e}),{});se.Syntax=SyntaxError,se.Type=TypeError,se.Range=RangeError;var ce=$.reduce((function(e,t){return e[t+"Error"]=se[t],e}),{}),le=ee.reduce((function(e,t){return-1===["Syntax","Type","Range"].indexOf(t)&&(e[t+"Error"]=se[t]),e}),{});function fe(){}function he(e){return e}function de(e,t){return null==e||e===he?t:function(n){return t(e(n))}}function pe(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function ye(e,t){return e===fe?t:function(){var n=e.apply(this,arguments);void 0!==n&&(arguments[0]=n);var r=this.onsuccess,o=this.onerror;this.onsuccess=null,this.onerror=null;var i=t.apply(this,arguments);return r&&(this.onsuccess=this.onsuccess?pe(r,this.onsuccess):r),o&&(this.onerror=this.onerror?pe(o,this.onerror):o),void 0!==i?i:n}}function me(e,t){return e===fe?t:function(){e.apply(this,arguments);var n=this.onsuccess,r=this.onerror;this.onsuccess=this.onerror=null,t.apply(this,arguments),n&&(this.onsuccess=this.onsuccess?pe(n,this.onsuccess):n),r&&(this.onerror=this.onerror?pe(r,this.onerror):r)}}function ve(e,t){return e===fe?t:function(n){var r=e.apply(this,arguments);d(n,r);var o=this.onsuccess,i=this.onerror;this.onsuccess=null,this.onerror=null;var a=t.apply(this,arguments);return o&&(this.onsuccess=this.onsuccess?pe(o,this.onsuccess):o),i&&(this.onerror=this.onerror?pe(i,this.onerror):i),void 0===r?void 0===a?void 0:a:d(r,a)}}function ge(e,t){return e===fe?t:function(){return!1!==t.apply(this,arguments)&&e.apply(this,arguments)}}function be(e,t){return e===fe?t:function(){var n=e.apply(this,arguments);if(n&&"function"==typeof n.then){for(var r=this,o=arguments.length,i=new Array(o);o--;)i[o]=arguments[o];return n.then((function(){return t.apply(r,i)}))}return t.apply(this,arguments)}}le.ModifyError=oe,le.DexieError=ne,le.BulkError=ie;var we={},_e="undefined"==typeof Promise?[]:function(){var e=Promise.resolve();if("undefined"==typeof crypto||!crypto.subtle)return[e,e.__proto__,e];var t=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[t,t.__proto__,e]}(),xe=_e[0],ke=_e[1],Ce=_e[2],Ae=ke&&ke.then,Te=xe&&xe.constructor,Ee=!!Ce,Se=!1,Pe=Ce?function(){Ce.then(Ze)}:h.setImmediate?setImmediate.bind(null,Ze):h.MutationObserver?function(){var e=document.createElement("div");new MutationObserver((function(){Ze(),e=null})).observe(e,{attributes:!0}),e.setAttribute("i","1")}:function(){setTimeout(Ze,0)},Oe=function(e,t){Re.push([e,t]),De&&(Pe(),De=!1)},Me=!0,De=!0,je=[],Be=[],Ke=null,qe=he,Ie={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:xt,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach((function(e){try{xt(e[0],e[1])}catch(e){}}))}},Ne=Ie,Re=[],Fe=0,Ue=[];function We(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=fe,this._lib=!1;var t=this._PSD=Ne;if(G&&(this._stackHolder=J(),this._prev=null,this._numPrev=0),"function"!=typeof e){if(e!==we)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&He(this,this._value))}this._state=null,this._value=null,++t.ref,ze(this,e)}var Le={get:function(){var e=Ne,t=st;function n(n,r){var o=this,i=!e.global&&(e!==Ne||t!==st);i&&ht();var a=new We((function(t,a){Xe(o,new Ye(bt(n,e,i),bt(r,e,i),t,a,e))}));return G&&Je(a,this),a}return n.prototype=we,n},set:function(e){b(this,"then",e&&e.prototype===we?Le:{get:function(){return e},set:Le.set})}};function Ye(e,t,n,r,o){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=n,this.reject=r,this.psd=o}function ze(e,t){try{t((function(t){if(null===e._state){if(t===e)throw new TypeError("A promise cannot be resolved with itself.");var n=e._lib&&$e();t&&"function"==typeof t.then?ze(e,(function(e,n){t instanceof We?t._then(e,n):t.then(e,n)})):(e._state=!0,e._value=t,Ge(e)),n&&et()}}),He.bind(null,e))}catch(t){He(e,t)}}function He(e,t){if(Be.push(t),null===e._state){var n=e._lib&&$e();t=qe(t),e._state=!1,e._value=t,G&&null!==t&&"object"==typeof t&&!t._promise&&function(n,r,o){try{(function(){var n=x(t,"stack");t._promise=e,b(t,"stack",{get:function(){return Se?n&&(n.get?n.get.apply(t):n.value):e.stack}})}).apply(null,void 0)}catch(e){}}(),function(e){je.some((function(t){return t._value===e._value}))||je.push(e)}(e),Ge(e),n&&et()}}function Ge(e){var t=e._listeners;e._listeners=[];for(var n=0,r=t.length;n<r;++n)Xe(e,t[n]);var o=e._PSD;--o.ref||o.finalize(),0===Fe&&(++Fe,Oe((function(){0==--Fe&&tt()}),[]))}function Xe(e,t){if(null!==e._state){var n=e._state?t.onFulfilled:t.onRejected;if(null===n)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++Fe,Oe(Qe,[n,e,t])}else e._listeners.push(t)}function Qe(e,t,n){try{Ke=t;var r,o=t._value;t._state?r=e(o):(Be.length&&(Be=[]),r=e(o),-1===Be.indexOf(o)&&function(e){for(var t=je.length;t;)if(je[--t]._value===e._value)return void je.splice(t,1)}(t)),n.resolve(r)}catch(e){n.reject(e)}finally{Ke=null,0==--Fe&&tt(),--n.psd.ref||n.psd.finalize()}}function Ve(e,t,n){if(t.length===n)return t;var r="";if(!1===e._state){var o,i,a=e._value;null!=a?(o=a.name||"Error",i=a.message||a,r=Z(a,0)):(o=a,i=""),t.push(o+(i?": "+i:"")+r)}return G&&((r=Z(e._stackHolder,2))&&-1===t.indexOf(r)&&t.push(r),e._prev&&Ve(e._prev,t,n)),t}function Je(e,t){var n=t?t._numPrev+1:0;n<100&&(e._prev=t,e._numPrev=n)}function Ze(){$e()&&et()}function $e(){var e=Me;return Me=!1,De=!1,e}function et(){var e,t,n;do{for(;Re.length>0;)for(e=Re,Re=[],n=e.length,t=0;t<n;++t){var r=e[t];r[0].apply(null,r[1])}}while(Re.length>0);Me=!0,De=!0}function tt(){var e=je;je=[],e.forEach((function(e){e._PSD.onunhandled.call(null,e._value,e)}));for(var t=Ue.slice(0),n=t.length;n;)t[--n]()}function nt(e){return new We(we,!1,e)}function rt(e,t){var n=Ne;return function(){var r=$e(),o=Ne;try{return mt(n,!0),e.apply(this,arguments)}catch(e){t&&t(e)}finally{mt(o,!1),r&&et()}}}v(We.prototype,{then:Le,_then:function(e,t){Xe(this,new Ye(null,null,e,t,Ne))},catch:function(e){if(1===arguments.length)return this.then(null,e);var t=arguments[0],n=arguments[1];return"function"==typeof t?this.then(null,(function(e){return e instanceof t?n(e):nt(e)})):this.then(null,(function(e){return e&&e.name===t?n(e):nt(e)}))},finally:function(e){return this.then((function(t){return e(),t}),(function(t){return e(),nt(t)}))},stack:{get:function(){if(this._stack)return this._stack;try{Se=!0;var e=Ve(this,[],20).join("\nFrom previous: ");return null!==this._state&&(this._stack=e),e}finally{Se=!1}}},timeout:function(e,t){var n=this;return e<1/0?new We((function(r,o){var i=setTimeout((function(){return o(new se.Timeout(t))}),e);n.then(r,o).finally(clearTimeout.bind(null,i))})):this}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&b(We.prototype,Symbol.toStringTag,"Dexie.Promise"),Ie.env=vt(),v(We,{all:function(){var e=z.apply(null,arguments).map(dt);return new We((function(t,n){0===e.length&&t([]);var r=e.length;e.forEach((function(o,i){return We.resolve(o).then((function(n){e[i]=n,--r||t(e)}),n)}))}))},resolve:function(e){if(e instanceof We)return e;if(e&&"function"==typeof e.then)return new We((function(t,n){e.then(t,n)}));var t=new We(we,!0,e);return Je(t,Ke),t},reject:nt,race:function(){var e=z.apply(null,arguments).map(dt);return new We((function(t,n){e.map((function(e){return We.resolve(e).then(t,n)}))}))},PSD:{get:function(){return Ne},set:function(e){return Ne=e}},newPSD:lt,usePSD:gt,scheduler:{get:function(){return Oe},set:function(e){Oe=e}},rejectionMapper:{get:function(){return qe},set:function(e){qe=e}},follow:function(e,t){return new We((function(n,r){return lt((function(t,n){var r=Ne;r.unhandleds=[],r.onunhandled=n,r.finalize=pe((function(){var e=this;Ue.push((function r(){0===e.unhandleds.length?t():n(e.unhandleds[0]),Ue.splice(Ue.indexOf(r),1)})),++Fe,Oe((function(){0==--Fe&&tt()}),[])}),r.finalize),e()}),t,n,r)}))}}),Te&&(Te.allSettled&&b(We,"allSettled",(function(){var e=z.apply(null,arguments).map(dt);return new We((function(t){0===e.length&&t([]);var n=e.length,r=new Array(n);e.forEach((function(e,o){return We.resolve(e).then((function(e){return r[o]={status:"fulfilled",value:e}}),(function(e){return r[o]={status:"rejected",reason:e}})).then((function(){return--n||t(r)}))}))}))})),Te.any&&"undefined"!=typeof AggregateError&&b(We,"any",(function(){var e=z.apply(null,arguments).map(dt);return new We((function(t,n){0===e.length&&n(new AggregateError([]));var r=e.length,o=new Array(r);e.forEach((function(e,i){return We.resolve(e).then((function(e){return t(e)}),(function(e){o[i]=e,--r||n(new AggregateError(o))}))}))}))})));var ot={awaits:0,echoes:0,id:0},it=0,at=[],ut=0,st=0,ct=0;function lt(e,t,n,r){var o=Ne,i=Object.create(o);i.parent=o,i.ref=0,i.global=!1,i.id=++ct;var a=Ie.env;i.env=Ee?{Promise:We,PromiseProp:{value:We,configurable:!0,writable:!0},all:We.all,race:We.race,allSettled:We.allSettled,any:We.any,resolve:We.resolve,reject:We.reject,nthen:wt(a.nthen,i),gthen:wt(a.gthen,i)}:{},t&&d(i,t),++o.ref,i.finalize=function(){--this.parent.ref||this.parent.finalize()};var u=gt(i,e,n,r);return 0===i.ref&&i.finalize(),u}function ft(){return ot.id||(ot.id=++it),++ot.awaits,ot.echoes+=100,ot.id}function ht(e){!ot.awaits||e&&e!==ot.id||(0==--ot.awaits&&(ot.id=0),ot.echoes=100*ot.awaits)}function dt(e){return ot.echoes&&e&&e.constructor===Te?(ft(),e.then((function(e){return ht(),e}),(function(e){return ht(),kt(e)}))):e}function pt(e){++st,ot.echoes&&0!=--ot.echoes||(ot.echoes=ot.id=0),at.push(Ne),mt(e,!0)}function yt(){var e=at[at.length-1];at.pop(),mt(e,!1)}function mt(e,t){var n,r=Ne;if((t?!ot.echoes||ut++&&e===Ne:!ut||--ut&&e===Ne)||(n=t?pt.bind(null,e):yt,Ae.call(xe,n)),e!==Ne&&(Ne=e,r===Ie&&(Ie.env=vt()),Ee)){var o=Ie.env.Promise,i=e.env;ke.then=i.nthen,o.prototype.then=i.gthen,(r.global||e.global)&&(Object.defineProperty(h,"Promise",i.PromiseProp),o.all=i.all,o.race=i.race,o.resolve=i.resolve,o.reject=i.reject,i.allSettled&&(o.allSettled=i.allSettled),i.any&&(o.any=i.any))}}function vt(){var e=h.Promise;return Ee?{Promise:e,PromiseProp:Object.getOwnPropertyDescriptor(h,"Promise"),all:e.all,race:e.race,allSettled:e.allSettled,any:e.any,resolve:e.resolve,reject:e.reject,nthen:ke.then,gthen:e.prototype.then}:{}}function gt(e,t,n,r,o){var i=Ne;try{return mt(e,!0),t(n,r,o)}finally{mt(i,!1)}}function bt(e,t,n){return"function"!=typeof e?e:function(){var r=Ne;n&&ft(),mt(t,!0);try{return e.apply(this,arguments)}finally{mt(r,!1)}}}function wt(e,t){return function(n,r){return e.call(this,bt(n,t,!1),bt(r,t,!1))}}-1===(""+Ae).indexOf("[native code]")&&(ft=ht=fe);var _t="unhandledrejection";function xt(e,t){var n;try{n=t.onuncatched(e)}catch(e){}if(!1!==n)try{var r,o={promise:t,reason:e};if(h.document&&document.createEvent?((r=document.createEvent("Event")).initEvent(_t,!0,!0),d(r,o)):h.CustomEvent&&d(r=new CustomEvent(_t,{detail:o}),o),r&&h.dispatchEvent&&(dispatchEvent(r),!h.PromiseRejectionEvent&&h.onunhandledrejection))try{h.onunhandledrejection(r)}catch(e){}G&&r&&!r.defaultPrevented&&console.warn("Unhandled rejection: "+(e.stack||e))}catch(e){}}var kt=We.reject;function Ct(e,t,n,r){if(e._state.openComplete||Ne.letThrough){var o=e._createTransaction(t,n,e._dbSchema);try{o.create()}catch(e){return kt(e)}return o._promise(t,(function(e,t){return lt((function(){return Ne.trans=o,r(e,t,o)}))})).then((function(e){return o._completion.then((function(){return e}))}))}if(!e._state.isBeingOpened){if(!e._options.autoOpen)return kt(new se.DatabaseClosed);e.open().catch(fe)}return e._state.dbReadyPromise.then((function(){return Ct(e,t,n,r)}))}var At="3.0.2",Tt=String.fromCharCode(65535),Et=-1/0,St="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",Pt="String expected.",Ot=[],Mt="undefined"!=typeof navigator&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),Dt=Mt,jt=Mt,Bt=function(e){return!/(dexie\.js|dexie\.min\.js)/.test(e)},Kt="__dbnames",qt="readonly",It="readwrite";function Nt(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}var Rt={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1},Ft=function(){function e(){}return e.prototype._trans=function(e,t,n){var r=this._tx||Ne.trans,o=this.name;function i(e,n,r){if(!r.schema[o])throw new se.NotFound("Table "+o+" not part of transaction");return t(r.idbtrans,r)}var a=$e();try{return r&&r.db===this.db?r===Ne.trans?r._promise(e,i,n):lt((function(){return r._promise(e,i,n)}),{trans:r,transless:Ne.transless||Ne}):Ct(this.db,e,[this.name],i)}finally{a&&et()}},e.prototype.get=function(e,t){var n=this;return e&&e.constructor===Object?this.where(e).first(t):this._trans("readonly",(function(t){return n.core.get({trans:t,key:e}).then((function(e){return n.hook.reading.fire(e)}))})).then(t)},e.prototype.where=function(e){if("string"==typeof e)return new this.db.WhereClause(this,e);if(f(e))return new this.db.WhereClause(this,"["+e.join("+")+"]");var t=l(e);if(1===t.length)return this.where(t[0]).equals(e[t[0]]);var n=this.schema.indexes.concat(this.schema.primKey).filter((function(e){return e.compound&&t.every((function(t){return e.keyPath.indexOf(t)>=0}))&&e.keyPath.every((function(e){return t.indexOf(e)>=0}))}))[0];if(n&&this.db._maxKey!==Tt)return this.where(n.name).equals(n.keyPath.map((function(t){return e[t]})));!n&&G&&console.warn("The query "+JSON.stringify(e)+" on "+this.name+" would benefit of a compound index ["+t.join("+")+"]");var r=this.schema.idxByName,o=this.db._deps.indexedDB;function i(e,t){try{return 0===o.cmp(e,t)}catch(e){return!1}}var a=t.reduce((function(t,n){var o=t[0],a=t[1],u=r[n],s=e[n];return[o||u,o||!u?Nt(a,u&&u.multi?function(e){var t=P(e,n);return f(t)&&t.some((function(e){return i(s,e)}))}:function(e){return i(s,P(e,n))}):a]}),[null,null]),u=a[0],s=a[1];return u?this.where(u.name).equals(e[u.keyPath]).filter(s):n?this.filter(s):this.where(t).equals("")},e.prototype.filter=function(e){return this.toCollection().and(e)},e.prototype.count=function(e){return this.toCollection().count(e)},e.prototype.offset=function(e){return this.toCollection().offset(e)},e.prototype.limit=function(e){return this.toCollection().limit(e)},e.prototype.each=function(e){return this.toCollection().each(e)},e.prototype.toArray=function(e){return this.toCollection().toArray(e)},e.prototype.toCollection=function(){return new this.db.Collection(new this.db.WhereClause(this))},e.prototype.orderBy=function(e){return new this.db.Collection(new this.db.WhereClause(this,f(e)?"["+e.join("+")+"]":e))},e.prototype.reverse=function(){return this.toCollection().reverse()},e.prototype.mapToClass=function(e){this.schema.mappedClass=e;var t=function(t){if(!t)return t;var n=Object.create(e.prototype);for(var r in t)if(m(t,r))try{n[r]=t[r]}catch(e){}return n};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=t,this.hook("reading",t),e},e.prototype.defineClass=function(){return this.mapToClass((function(e){d(this,e)}))},e.prototype.add=function(e,t){var n=this;return this._trans("readwrite",(function(r){return n.core.mutate({trans:r,type:"add",keys:null!=t?[t]:null,values:[e]})})).then((function(e){return e.numFailures?We.reject(e.failures[0]):e.lastResult})).then((function(t){if(!n.core.schema.primaryKey.outbound)try{O(e,n.core.schema.primaryKey.keyPath,t)}catch(e){}return t}))},e.prototype.update=function(e,t){if("object"!=typeof t||f(t))throw new se.InvalidArgument("Modifications must be an object.");if("object"!=typeof e||f(e))return this.where(":id").equals(e).modify(t);l(t).forEach((function(n){O(e,n,t[n])}));var n=P(e,this.schema.primKey.keyPath);return void 0===n?kt(new se.InvalidArgument("Given object does not contain its primary key")):this.where(":id").equals(n).modify(t)},e.prototype.put=function(e,t){var n=this;return this._trans("readwrite",(function(r){return n.core.mutate({trans:r,type:"put",values:[e],keys:null!=t?[t]:null})})).then((function(e){return e.numFailures?We.reject(e.failures[0]):e.lastResult})).then((function(t){if(!n.core.schema.primaryKey.outbound)try{O(e,n.core.schema.primaryKey.keyPath,t)}catch(e){}return t}))},e.prototype.delete=function(e){var t=this;return this._trans("readwrite",(function(n){return t.core.mutate({trans:n,type:"delete",keys:[e]})})).then((function(e){return e.numFailures?We.reject(e.failures[0]):void 0}))},e.prototype.clear=function(){var e=this;return this._trans("readwrite",(function(t){return e.core.mutate({trans:t,type:"deleteRange",range:Rt})})).then((function(e){return e.numFailures?We.reject(e.failures[0]):void 0}))},e.prototype.bulkGet=function(e){var t=this;return this._trans("readonly",(function(n){return t.core.getMany({keys:e,trans:n}).then((function(e){return e.map((function(e){return t.hook.reading.fire(e)}))}))}))},e.prototype.bulkAdd=function(e,t,n){var r=this,o=Array.isArray(t)?t:void 0,i=(n=n||(o?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(function(t){if(!r.core.schema.primaryKey.outbound&&o)throw new se.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(o&&o.length!==e.length)throw new se.InvalidArgument("Arguments objects and keys must have the same length");var n=e.length;return r.core.mutate({trans:t,type:"add",keys:o,values:e,wantResults:i}).then((function(e){var t=e.numFailures,o=e.results,a=e.lastResult,u=e.failures;if(0===t)return i?o:a;throw new ie(r.name+".bulkAdd(): "+t+" of "+n+" operations failed",Object.keys(u).map((function(e){return u[e]})))}))}))},e.prototype.bulkPut=function(e,t,n){var r=this,o=Array.isArray(t)?t:void 0,i=(n=n||(o?void 0:t))?n.allKeys:void 0;return this._trans("readwrite",(function(t){if(!r.core.schema.primaryKey.outbound&&o)throw new se.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(o&&o.length!==e.length)throw new se.InvalidArgument("Arguments objects and keys must have the same length");var n=e.length;return r.core.mutate({trans:t,type:"put",keys:o,values:e,wantResults:i}).then((function(e){var t=e.numFailures,o=e.results,a=e.lastResult,u=e.failures;if(0===t)return i?o:a;throw new ie(r.name+".bulkPut(): "+t+" of "+n+" operations failed",Object.keys(u).map((function(e){return u[e]})))}))}))},e.prototype.bulkDelete=function(e){var t=this,n=e.length;return this._trans("readwrite",(function(n){return t.core.mutate({trans:n,type:"delete",keys:e})})).then((function(e){var r=e.numFailures,o=e.lastResult,i=e.failures;if(0===r)return o;throw new ie(t.name+".bulkDelete(): "+r+" of "+n+" operations failed",i)}))},e}();function Ut(e){var t={},n=function(n,r){if(r){for(var o=arguments.length,i=new Array(o-1);--o;)i[o-1]=arguments[o];return t[n].subscribe.apply(null,i),e}if("string"==typeof n)return t[n]};n.addEventType=i;for(var r=1,o=arguments.length;r<o;++r)i(arguments[r]);return n;function i(e,r,o){if("object"==typeof e)return a(e);r||(r=ge),o||(o=fe);var i={subscribers:[],fire:o,subscribe:function(e){-1===i.subscribers.indexOf(e)&&(i.subscribers.push(e),i.fire=r(i.fire,e))},unsubscribe:function(e){i.subscribers=i.subscribers.filter((function(t){return t!==e})),i.fire=i.subscribers.reduce(r,o)}};return t[e]=n[e]=i,i}function a(e){l(e).forEach((function(t){var n=e[t];if(f(n))i(t,e[t][0],e[t][1]);else{if("asap"!==n)throw new se.InvalidArgument("Invalid event config");var r=i(t,he,(function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];r.subscribers.forEach((function(e){E((function(){e.apply(null,t)}))}))}))}}))}}function Wt(e,t){return w(t).from({prototype:e}),t}function Lt(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function Yt(e,t){e.filter=Nt(e.filter,t)}function zt(e,t,n){var r=e.replayFilter;e.replayFilter=r?function(){return Nt(r(),t())}:t,e.justLimit=n&&!r}function Ht(e,t){if(e.isPrimKey)return t.primaryKey;var n=t.getIndexByKeyPath(e.index);if(!n)throw new se.Schema("KeyPath "+e.index+" on object store "+t.name+" is not indexed");return n}function Gt(e,t,n){var r=Ht(e,t.schema);return t.openCursor({trans:n,values:!e.keysOnly,reverse:"prev"===e.dir,unique:!!e.unique,query:{index:r,range:e.range}})}function Xt(e,t,n,r){var o=e.replayFilter?Nt(e.filter,e.replayFilter()):e.filter;if(e.or){var i={},a=function(e,n,r){if(!o||o(n,r,(function(e){return n.stop(e)}),(function(e){return n.fail(e)}))){var a=n.primaryKey,u=""+a;"[object ArrayBuffer]"===u&&(u=""+new Uint8Array(a)),m(i,u)||(i[u]=!0,t(e,n,r))}};return Promise.all([e.or._iterate(a,n),Qt(Gt(e,r,n),e.algorithm,a,!e.keysOnly&&e.valueMapper)])}return Qt(Gt(e,r,n),Nt(e.algorithm,o),t,!e.keysOnly&&e.valueMapper)}function Qt(e,t,n,r){var o=rt(r?function(e,t,o){return n(r(e),t,o)}:n);return e.then((function(e){if(e)return e.start((function(){var n=function(){return e.continue()};t&&!t(e,(function(e){return n=e}),(function(t){e.stop(t),n=fe}),(function(t){e.fail(t),n=fe}))||o(e.value,e,(function(e){return n=e})),n()}))}))}var Vt=function(){function e(){}return e.prototype._read=function(e,t){var n=this._ctx;return n.error?n.table._trans(null,kt.bind(null,n.error)):n.table._trans("readonly",e).then(t)},e.prototype._write=function(e){var t=this._ctx;return t.error?t.table._trans(null,kt.bind(null,t.error)):t.table._trans("readwrite",e,"locked")},e.prototype._addAlgorithm=function(e){var t=this._ctx;t.algorithm=Nt(t.algorithm,e)},e.prototype._iterate=function(e,t){return Xt(this._ctx,e,t,this._ctx.table.core)},e.prototype.clone=function(e){var t=Object.create(this.constructor.prototype),n=Object.create(this._ctx);return e&&d(n,e),t._ctx=n,t},e.prototype.raw=function(){return this._ctx.valueMapper=null,this},e.prototype.each=function(e){var t=this._ctx;return this._read((function(n){return Xt(t,e,n,t.table.core)}))},e.prototype.count=function(e){var t=this;return this._read((function(e){var n=t._ctx,r=n.table.core;if(Lt(n,!0))return r.count({trans:e,query:{index:Ht(n,r.schema),range:n.range}}).then((function(e){return Math.min(e,n.limit)}));var o=0;return Xt(n,(function(){return++o,!1}),e,r).then((function(){return o}))})).then(e)},e.prototype.sortBy=function(e,t){var n=e.split(".").reverse(),r=n[0],o=n.length-1;function i(e,t){return t?i(e[n[t]],t-1):e[r]}var a="next"===this._ctx.dir?1:-1;function u(e,t){var n=i(e,o),r=i(t,o);return n<r?-a:n>r?a:0}return this.toArray((function(e){return e.sort(u)})).then(t)},e.prototype.toArray=function(e){var t=this;return this._read((function(e){var n=t._ctx;if("next"===n.dir&&Lt(n,!0)&&n.limit>0){var r=n.valueMapper,o=Ht(n,n.table.core.schema);return n.table.core.query({trans:e,limit:n.limit,values:!0,query:{index:o,range:n.range}}).then((function(e){var t=e.result;return r?t.map(r):t}))}var i=[];return Xt(n,(function(e){return i.push(e)}),e,n.table.core).then((function(){return i}))}),e)},e.prototype.offset=function(e){var t=this._ctx;return e<=0||(t.offset+=e,Lt(t)?zt(t,(function(){var t=e;return function(e,n){return 0===t||(1===t?(--t,!1):(n((function(){e.advance(t),t=0})),!1))}})):zt(t,(function(){var t=e;return function(){return--t<0}}))),this},e.prototype.limit=function(e){return this._ctx.limit=Math.min(this._ctx.limit,e),zt(this._ctx,(function(){var t=e;return function(e,n,r){return--t<=0&&n(r),t>=0}}),!0),this},e.prototype.until=function(e,t){return Yt(this._ctx,(function(n,r,o){return!e(n.value)||(r(o),t)})),this},e.prototype.first=function(e){return this.limit(1).toArray((function(e){return e[0]})).then(e)},e.prototype.last=function(e){return this.reverse().first(e)},e.prototype.filter=function(e){var t,n;return Yt(this._ctx,(function(t){return e(t.value)})),t=this._ctx,n=e,t.isMatch=Nt(t.isMatch,n),this},e.prototype.and=function(e){return this.filter(e)},e.prototype.or=function(e){return new this.db.WhereClause(this._ctx.table,e,this)},e.prototype.reverse=function(){return this._ctx.dir="prev"===this._ctx.dir?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this},e.prototype.desc=function(){return this.reverse()},e.prototype.eachKey=function(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.key,n)}))},e.prototype.eachUniqueKey=function(e){return this._ctx.unique="unique",this.eachKey(e)},e.prototype.eachPrimaryKey=function(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,n){e(n.primaryKey,n)}))},e.prototype.keys=function(e){var t=this._ctx;t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.key)})).then((function(){return n})).then(e)},e.prototype.primaryKeys=function(e){var t=this._ctx;if("next"===t.dir&&Lt(t,!0)&&t.limit>0)return this._read((function(e){var n=Ht(t,t.table.core.schema);return t.table.core.query({trans:e,values:!1,limit:t.limit,query:{index:n,range:t.range}})})).then((function(e){return e.result})).then(e);t.keysOnly=!t.isMatch;var n=[];return this.each((function(e,t){n.push(t.primaryKey)})).then((function(){return n})).then(e)},e.prototype.uniqueKeys=function(e){return this._ctx.unique="unique",this.keys(e)},e.prototype.firstKey=function(e){return this.limit(1).keys((function(e){return e[0]})).then(e)},e.prototype.lastKey=function(e){return this.reverse().firstKey(e)},e.prototype.distinct=function(){var e=this._ctx,t=e.index&&e.table.schema.idxByName[e.index];if(!t||!t.multi)return this;var n={};return Yt(this._ctx,(function(e){var t=e.primaryKey.toString(),r=m(n,t);return n[t]=!0,!r})),this},e.prototype.modify=function(e){var t=this,n=this._ctx;return this._write((function(r){var o;if("function"==typeof e)o=e;else{var i=l(e),a=i.length;o=function(t){for(var n=!1,r=0;r<a;++r){var o=i[r],u=e[o];P(t,o)!==u&&(O(t,o,u),n=!0)}return n}}var u=n.table.core,s=u.schema.primaryKey,c=s.outbound,f=s.extractKey,h="testmode"in Rn?1:2e3,d=t.db.core.cmp,p=[],y=0,m=[],v=function(e,t){var n=t.failures,r=t.numFailures;y+=e-r;for(var o=0,i=l(n);o<i.length;o++){var a=i[o];p.push(n[a])}};return t.clone().primaryKeys().then((function(e){var t=function(n){var i=Math.min(h,e.length-n);return u.getMany({trans:r,keys:e.slice(n,n+i)}).then((function(a){for(var s=[],l=[],p=c?[]:null,y=[],m=0;m<i;++m){var g=a[m],b={value:I(g),primKey:e[n+m]};!1!==o.call(b,b.value,b)&&(null==b.value?y.push(e[n+m]):c||0===d(f(g),f(b.value))?(l.push(b.value),c&&p.push(e[n+m])):(y.push(e[n+m]),s.push(b.value)))}return Promise.resolve(s.length>0&&u.mutate({trans:r,type:"add",values:s}).then((function(e){for(var t in e.failures)y.splice(parseInt(t),1);v(s.length,e)}))).then((function(e){return l.length>0&&u.mutate({trans:r,type:"put",keys:p,values:l}).then((function(e){return v(l.length,e)}))})).then((function(){return y.length>0&&u.mutate({trans:r,type:"delete",keys:y}).then((function(e){return v(y.length,e)}))})).then((function(){return e.length>n+i&&t(n+h)}))}))};return t(0).then((function(){if(p.length>0)throw new oe("Error modifying one or more objects",p,y,m);return e.length}))}))}))},e.prototype.delete=function(){var e=this._ctx,t=e.range;return Lt(e)&&(e.isPrimKey&&!jt||3===t.type)?this._write((function(n){var r=e.table.core.schema.primaryKey,o=t;return e.table.core.count({trans:n,query:{index:r,range:o}}).then((function(t){return e.table.core.mutate({trans:n,type:"deleteRange",range:o}).then((function(e){var n=e.failures,r=(e.lastResult,e.results,e.numFailures);if(r)throw new oe("Could not delete some values",Object.keys(n).map((function(e){return n[e]})),t-r);return t-r}))}))})):this.modify((function(e,t){return t.value=null}))},e}();function Jt(e,t){return e<t?-1:e===t?0:1}function Zt(e,t){return e>t?-1:e===t?0:1}function $t(e,t,n){var r=e instanceof an?new e.Collection(e):e;return r._ctx.error=n?new n(t):new TypeError(t),r}function en(e){return new e.Collection(e,(function(){return on("")})).limit(0)}function tn(e,t,n,r,o,i){for(var a=Math.min(e.length,r.length),u=-1,s=0;s<a;++s){var c=t[s];if(c!==r[s])return o(e[s],n[s])<0?e.substr(0,s)+n[s]+n.substr(s+1):o(e[s],r[s])<0?e.substr(0,s)+r[s]+n.substr(s+1):u>=0?e.substr(0,u)+t[u]+n.substr(u+1):null;o(e[s],c)<0&&(u=s)}return a<r.length&&"next"===i?e+n.substr(e.length):a<e.length&&"prev"===i?e.substr(0,n.length):u<0?null:e.substr(0,u)+r[u]+n.substr(u+1)}function nn(e,t,n,r){var o,i,a,u,s,c,l,f=n.length;if(!n.every((function(e){return"string"==typeof e})))return $t(e,Pt);function h(e){o=function(e){return"next"===e?function(e){return e.toUpperCase()}:function(e){return e.toLowerCase()}}(e),i=function(e){return"next"===e?function(e){return e.toLowerCase()}:function(e){return e.toUpperCase()}}(e),a="next"===e?Jt:Zt;var t=n.map((function(e){return{lower:i(e),upper:o(e)}})).sort((function(e,t){return a(e.lower,t.lower)}));u=t.map((function(e){return e.upper})),s=t.map((function(e){return e.lower})),c=e,l="next"===e?"":r}h("next");var d=new e.Collection(e,(function(){return rn(u[0],s[f-1]+r)}));d._ondirectionchange=function(e){h(e)};var p=0;return d._addAlgorithm((function(e,n,r){var o=e.key;if("string"!=typeof o)return!1;var h=i(o);if(t(h,s,p))return!0;for(var d=null,y=p;y<f;++y){var m=tn(o,h,u[y],s[y],a,c);null===m&&null===d?p=y+1:(null===d||a(d,m)>0)&&(d=m)}return n(null!==d?function(){e.continue(d+l)}:r),!1})),d}function rn(e,t,n,r){return{type:2,lower:e,upper:t,lowerOpen:n,upperOpen:r}}function on(e){return{type:1,lower:e,upper:e}}var an=function(){function e(){}return Object.defineProperty(e.prototype,"Collection",{get:function(){return this._ctx.table.db.Collection},enumerable:!0,configurable:!0}),e.prototype.between=function(e,t,n,r){n=!1!==n,r=!0===r;try{return this._cmp(e,t)>0||0===this._cmp(e,t)&&(n||r)&&(!n||!r)?en(this):new this.Collection(this,(function(){return rn(e,t,!n,!r)}))}catch(e){return $t(this,St)}},e.prototype.equals=function(e){return new this.Collection(this,(function(){return on(e)}))},e.prototype.above=function(e){return null==e?$t(this,St):new this.Collection(this,(function(){return rn(e,void 0,!0)}))},e.prototype.aboveOrEqual=function(e){return null==e?$t(this,St):new this.Collection(this,(function(){return rn(e,void 0,!1)}))},e.prototype.below=function(e){return null==e?$t(this,St):new this.Collection(this,(function(){return rn(void 0,e,!1,!0)}))},e.prototype.belowOrEqual=function(e){return null==e?$t(this,St):new this.Collection(this,(function(){return rn(void 0,e)}))},e.prototype.startsWith=function(e){return"string"!=typeof e?$t(this,Pt):this.between(e,e+Tt,!0,!0)},e.prototype.startsWithIgnoreCase=function(e){return""===e?this.startsWith(e):nn(this,(function(e,t){return 0===e.indexOf(t[0])}),[e],Tt)},e.prototype.equalsIgnoreCase=function(e){return nn(this,(function(e,t){return e===t[0]}),[e],"")},e.prototype.anyOfIgnoreCase=function(){var e=z.apply(Y,arguments);return 0===e.length?en(this):nn(this,(function(e,t){return-1!==t.indexOf(e)}),e,"")},e.prototype.startsWithAnyOfIgnoreCase=function(){var e=z.apply(Y,arguments);return 0===e.length?en(this):nn(this,(function(e,t){return t.some((function(t){return 0===e.indexOf(t)}))}),e,Tt)},e.prototype.anyOf=function(){var e=this,t=z.apply(Y,arguments),n=this._cmp;try{t.sort(n)}catch(e){return $t(this,St)}if(0===t.length)return en(this);var r=new this.Collection(this,(function(){return rn(t[0],t[t.length-1])}));r._ondirectionchange=function(r){n="next"===r?e._ascending:e._descending,t.sort(n)};var o=0;return r._addAlgorithm((function(e,r,i){for(var a=e.key;n(a,t[o])>0;)if(++o===t.length)return r(i),!1;return 0===n(a,t[o])||(r((function(){e.continue(t[o])})),!1)})),r},e.prototype.notEqual=function(e){return this.inAnyRange([[Et,e],[e,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})},e.prototype.noneOf=function(){var e=z.apply(Y,arguments);if(0===e.length)return new this.Collection(this);try{e.sort(this._ascending)}catch(e){return $t(this,St)}var t=e.reduce((function(e,t){return e?e.concat([[e[e.length-1][1],t]]):[[Et,t]]}),null);return t.push([e[e.length-1],this.db._maxKey]),this.inAnyRange(t,{includeLowers:!1,includeUppers:!1})},e.prototype.inAnyRange=function(e,t){var n=this,r=this._cmp,o=this._ascending,i=this._descending,a=this._min,u=this._max;if(0===e.length)return en(this);if(!e.every((function(e){return void 0!==e[0]&&void 0!==e[1]&&o(e[0],e[1])<=0})))return $t(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",se.InvalidArgument);var s,c=!t||!1!==t.includeLowers,l=t&&!0===t.includeUppers,f=o;function h(e,t){return f(e[0],t[0])}try{(s=e.reduce((function(e,t){for(var n=0,o=e.length;n<o;++n){var i=e[n];if(r(t[0],i[1])<0&&r(t[1],i[0])>0){i[0]=a(i[0],t[0]),i[1]=u(i[1],t[1]);break}}return n===o&&e.push(t),e}),[])).sort(h)}catch(e){return $t(this,St)}var d=0,p=l?function(e){return o(e,s[d][1])>0}:function(e){return o(e,s[d][1])>=0},y=c?function(e){return i(e,s[d][0])>0}:function(e){return i(e,s[d][0])>=0},m=p,v=new this.Collection(this,(function(){return rn(s[0][0],s[s.length-1][1],!c,!l)}));return v._ondirectionchange=function(e){"next"===e?(m=p,f=o):(m=y,f=i),s.sort(h)},v._addAlgorithm((function(e,t,r){for(var i=e.key;m(i);)if(++d===s.length)return t(r),!1;return!!function(e){return!p(e)&&!y(e)}(i)||(0===n._cmp(i,s[d][1])||0===n._cmp(i,s[d][0])||t((function(){f===o?e.continue(s[d][0]):e.continue(s[d][1])})),!1)})),v},e.prototype.startsWithAnyOf=function(){var e=z.apply(Y,arguments);return e.every((function(e){return"string"==typeof e}))?0===e.length?en(this):this.inAnyRange(e.map((function(e){return[e,e+Tt]}))):$t(this,"startsWithAnyOf() only works with strings")},e}();function un(e){return 1===e.length?e[0]:e}function sn(e){try{return e.only([[]]),[[]]}catch(e){return Tt}}function cn(e){return rt((function(t){return ln(t),e(t.target.error),!1}))}function ln(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}var fn=function(){function e(){}return e.prototype._lock=function(){return T(!Ne.global),++this._reculock,1!==this._reculock||Ne.global||(Ne.lockOwnerFor=this),this},e.prototype._unlock=function(){if(T(!Ne.global),0==--this._reculock)for(Ne.global||(Ne.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var e=this._blockedFuncs.shift();try{gt(e[1],e[0])}catch(e){}}return this},e.prototype._locked=function(){return this._reculock&&Ne.lockOwnerFor!==this},e.prototype.create=function(e){var t=this;if(!this.mode)return this;var n=this.db.idbdb,r=this.db._state.dbOpenError;if(T(!this.idbtrans),!e&&!n)switch(r&&r.name){case"DatabaseClosedError":throw new se.DatabaseClosed(r);case"MissingAPIError":throw new se.MissingAPI(r.message,r);default:throw new se.OpenFailed(r)}if(!this.active)throw new se.TransactionInactive;return T(null===this._completion._state),(e=this.idbtrans=e||n.transaction(un(this.storeNames),this.mode)).onerror=rt((function(n){ln(n),t._reject(e.error)})),e.onabort=rt((function(n){ln(n),t.active&&t._reject(new se.Abort(e.error)),t.active=!1,t.on("abort").fire(n)})),e.oncomplete=rt((function(){t.active=!1,t._resolve()})),this},e.prototype._promise=function(e,t,n){var r=this;if("readwrite"===e&&"readwrite"!==this.mode)return kt(new se.ReadOnly("Transaction is readonly"));if(!this.active)return kt(new se.TransactionInactive);if(this._locked())return new We((function(o,i){r._blockedFuncs.push([function(){r._promise(e,t,n).then(o,i)},Ne])}));if(n)return lt((function(){var e=new We((function(e,n){r._lock();var o=t(e,n,r);o&&o.then&&o.then(e,n)}));return e.finally((function(){return r._unlock()})),e._lib=!0,e}));var o=new We((function(e,n){var o=t(e,n,r);o&&o.then&&o.then(e,n)}));return o._lib=!0,o},e.prototype._root=function(){return this.parent?this.parent._root():this},e.prototype.waitFor=function(e){var t=this._root(),n=We.resolve(e);if(t._waitingFor)t._waitingFor=t._waitingFor.then((function(){return n}));else{t._waitingFor=n,t._waitingQueue=[];var r=t.idbtrans.objectStore(t.storeNames[0]);!function e(){for(++t._spinCount;t._waitingQueue.length;)t._waitingQueue.shift()();t._waitingFor&&(r.get(-1/0).onsuccess=e)}()}var o=t._waitingFor;return new We((function(e,r){n.then((function(n){return t._waitingQueue.push(rt(e.bind(null,n)))}),(function(e){return t._waitingQueue.push(rt(r.bind(null,e)))})).finally((function(){t._waitingFor===o&&(t._waitingFor=null)}))}))},e.prototype.abort=function(){this.active&&this._reject(new se.Abort),this.active=!1},e.prototype.table=function(e){var t=this._memoizedTables||(this._memoizedTables={});if(m(t,e))return t[e];var n=this.schema[e];if(!n)throw new se.NotFound("Table "+e+" not part of transaction");var r=new this.db.Table(e,n,this);return r.core=this.db.core.table(e),t[e]=r,r},e}();function hn(e,t,n,r,o,i,a){return{name:e,keyPath:t,unique:n,multi:r,auto:o,compound:i,src:(n&&!a?"&":"")+(r?"*":"")+(o?"++":"")+dn(t)}}function dn(e){return"string"==typeof e?e:e?"["+[].join.call(e,"+")+"]":""}function pn(e,t,n){return{name:e,primKey:t,indexes:n,mappedClass:null,idxByName:S(n,(function(e){return[e.name,e]}))}}function yn(e){return null==e?function(){}:"string"==typeof e?function(e){return 1===e.split(".").length?function(t){return t[e]}:function(t){return P(t,e)}}(e):function(t){return P(t,e)}}function mn(e,t){return"delete"===t.type?t.keys:t.keys||t.values.map(e.extractKey)}function vn(e){return[].slice.call(e)}var gn=0;function bn(e){return null==e?":id":"string"==typeof e?e:"["+e.join("+")+"]"}function wn(e,t,n,r){var o=t.cmp.bind(t);function i(e){if(3===e.type)return null;if(4===e.type)throw new Error("Cannot convert never type to IDBKeyRange");var t=e.lower,r=e.upper,o=e.lowerOpen,i=e.upperOpen;return void 0===t?void 0===r?null:n.upperBound(r,!!i):void 0===r?n.lowerBound(t,!!o):n.bound(t,r,!!o,!!i)}var a=function(e,t){var n=vn(e.objectStoreNames);return{schema:{name:e.name,tables:n.map((function(e){return t.objectStore(e)})).map((function(e){var t=e.keyPath,n=e.autoIncrement,r=f(t),o=null==t,i={},a={name:e.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:o,compound:r,keyPath:t,autoIncrement:n,unique:!0,extractKey:yn(t)},indexes:vn(e.indexNames).map((function(t){return e.index(t)})).map((function(e){var t=e.name,n=e.unique,r=e.multiEntry,o=e.keyPath,a={name:t,compound:f(o),keyPath:o,unique:n,multiEntry:r,extractKey:yn(o)};return i[bn(o)]=a,a})),getIndexByKeyPath:function(e){return i[bn(e)]}};return i[":id"]=a.primaryKey,null!=t&&(i[bn(t)]=a.primaryKey),a}))},hasGetAll:n.length>0&&"getAll"in t.objectStore(n[0])&&!("undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}(e,r),u=a.schema,s=a.hasGetAll,l=u.tables.map((function(e){return function(e){var t=e.name;return{name:t,schema:e,mutate:function(n){var r=n.trans,o=n.type,a=n.keys,u=n.values,s=n.range,l=n.wantResults;return new Promise((function(n,f){n=rt(n);var h=r.objectStore(t),d=null==h.keyPath,p="put"===o||"add"===o;if(!p&&"delete"!==o&&"deleteRange"!==o)throw new Error("Invalid operation type: "+o);var y=(a||u||{length:1}).length;if(a&&u&&a.length!==u.length)throw new Error("Given keys array must have same length as given values array.");if(0===y)return n({numFailures:0,failures:{},results:[],lastResult:void 0});var m,v=l&&c(a||mn(e.primaryKey,{type:o,keys:a,values:u})),g=[],b=0,w=function(e){++b,ln(e),v&&(v[e.target._reqno]=void 0),g[e.target._reqno]=e.target.error},_=function(e){var t=e.target;v[t._reqno]=t.result};if("deleteRange"===o){if(4===s.type)return n({numFailures:b,failures:g,results:v,lastResult:void 0});m=3===s.type?h.clear():h.delete(i(s))}else{var x=p?d?[u,a]:[u,null]:[a,null],k=x[0],C=x[1];if(p)for(var A=0;A<y;++A)(m=C&&void 0!==C[A]?h[o](k[A],C[A]):h[o](k[A]))._reqno=A,v&&void 0===v[A]&&(m.onsuccess=_),m.onerror=w;else for(A=0;A<y;++A)(m=h[o](k[A]))._reqno=A,m.onerror=w}var T=function(e){var t=e.target.result;v&&(v[y-1]=t),n({numFailures:b,failures:g,results:v,lastResult:t})};m.onerror=function(e){w(e),T(e)},m.onsuccess=T}))},getMany:function(e){var n=e.trans,r=e.keys;return new Promise((function(e,o){e=rt(e);for(var i,a=n.objectStore(t),u=r.length,s=new Array(u),c=0,l=0,f=function(t){var n=t.target;s[n._pos]=n.result,++l===c&&e(s)},h=cn(o),d=0;d<u;++d)null!=r[d]&&((i=a.get(r[d]))._pos=d,i.onsuccess=f,i.onerror=h,++c);0===c&&e(s)}))},get:function(e){var n=e.trans,r=e.key;return new Promise((function(e,o){e=rt(e);var i=n.objectStore(t).get(r);i.onsuccess=function(t){return e(t.target.result)},i.onerror=cn(o)}))},query:function(e){return function(n){return new Promise((function(r,o){r=rt(r);var a=n.trans,u=n.values,s=n.limit,c=n.query,l=s===1/0?void 0:s,f=c.index,h=c.range,d=a.objectStore(t),p=f.isPrimaryKey?d:d.index(f.name),y=i(h);if(0===s)return r({result:[]});if(e){var m=u?p.getAll(y,l):p.getAllKeys(y,l);m.onsuccess=function(e){return r({result:e.target.result})},m.onerror=cn(o)}else{var v=0,g=u||!("openKeyCursor"in p)?p.openCursor(y):p.openKeyCursor(y),b=[];g.onsuccess=function(e){var t=g.result;return t?(b.push(u?t.value:t.primaryKey),++v===s?r({result:b}):void t.continue()):r({result:b})},g.onerror=cn(o)}}))}}(s),openCursor:function(e){var n=e.trans,r=e.values,o=e.query,a=e.reverse,u=e.unique;return new Promise((function(e,s){e=rt(e);var c=o.index,l=o.range,f=n.objectStore(t),h=c.isPrimaryKey?f:f.index(c.name),d=a?u?"prevunique":"prev":u?"nextunique":"next",p=r||!("openKeyCursor"in h)?h.openCursor(i(l),d):h.openKeyCursor(i(l),d);p.onerror=cn(s),p.onsuccess=rt((function(t){var r=p.result;if(r){r.___id=++gn,r.done=!1;var o=r.continue.bind(r),i=r.continuePrimaryKey;i&&(i=i.bind(r));var a=r.advance.bind(r),u=function(){throw new Error("Cursor not stopped")};r.trans=n,r.stop=r.continue=r.continuePrimaryKey=r.advance=function(){throw new Error("Cursor not started")},r.fail=rt(s),r.next=function(){var e=this,t=1;return this.start((function(){return t--?e.continue():e.stop()})).then((function(){return e}))},r.start=function(e){var t=new Promise((function(e,t){e=rt(e),p.onerror=cn(t),r.fail=t,r.stop=function(t){r.stop=r.continue=r.continuePrimaryKey=r.advance=u,e(t)}})),n=function(){if(p.result)try{e()}catch(e){r.fail(e)}else r.done=!0,r.start=function(){throw new Error("Cursor behind last entry")},r.stop()};return p.onsuccess=rt((function(e){p.onsuccess=n,n()})),r.continue=o,r.continuePrimaryKey=i,r.advance=a,n(),t},e(r)}else e(null)}),s)}))},count:function(e){var n=e.query,r=e.trans,o=n.index,a=n.range;return new Promise((function(e,n){var u=r.objectStore(t),s=o.isPrimaryKey?u:u.index(o.name),c=i(a),l=c?s.count(c):s.count();l.onsuccess=rt((function(t){return e(t.target.result)})),l.onerror=cn(n)}))}}}(e)})),h={};return l.forEach((function(e){return h[e.name]=e})),{stack:"dbcore",transaction:e.transaction.bind(e),table:function(e){if(!h[e])throw new Error("Table '"+e+"' not found");return h[e]},cmp:o,MIN_KEY:-1/0,MAX_KEY:sn(n),schema:u}}function _n(e,t){var n=t.db,r=function(e,t,n,r){var o=n.IDBKeyRange;return{dbcore:function(e,t){return t.reduce((function(e,t){var n=t.create;return s(s({},e),n(e))}),e)}(wn(t,n.indexedDB,o,r),e.dbcore)}}(e._middlewares,n,e._deps,t);e.core=r.dbcore,e.tables.forEach((function(t){var n=t.name;e.core.schema.tables.some((function(e){return e.name===n}))&&(t.core=e.core.table(n),e[n]instanceof e.Table&&(e[n].core=t.core))}))}function xn(e,t,n,r){n.forEach((function(n){var o=r[n];t.forEach((function(t){n in t||(t===e.Transaction.prototype||t instanceof e.Transaction?b(t,n,{get:function(){return this.table(n)},set:function(e){g(this,n,{value:e,writable:!0,configurable:!0,enumerable:!0})}}):t[n]=new e.Table(n,o))}))}))}function kn(e,t){t.forEach((function(t){for(var n in t)t[n]instanceof e.Table&&delete t[n]}))}function Cn(e,t){return e._cfg.version-t._cfg.version}function An(e,t,n,r){var o=e.db.createObjectStore(t,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach((function(e){return Tn(o,e)})),o}function Tn(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function En(e,t,n){var r={};return C(t.objectStoreNames,0).forEach((function(e){for(var t=n.objectStore(e),o=t.keyPath,i=hn(dn(o),o||"",!1,!1,!!t.autoIncrement,o&&"string"!=typeof o,!0),a=[],u=0;u<t.indexNames.length;++u){var s=t.index(t.indexNames[u]);o=s.keyPath;var c=hn(s.name,o,!!s.unique,!!s.multiEntry,!1,o&&"string"!=typeof o,!1);a.push(c)}r[e]=pn(e,i,a)})),r}function Sn(e,t,n){for(var r=n.db.objectStoreNames,o=0;o<r.length;++o){var i=r[o],a=n.objectStore(i);e._hasGetAll="getAll"in a;for(var u=0;u<a.indexNames.length;++u){var s=a.indexNames[u],c=a.index(s).keyPath,l="string"==typeof c?c:"["+C(c).join("+")+"]";if(t[i]){var f=t[i].idxByName[l];f&&(f.name=s,delete t[i].idxByName[l],t[i].idxByName[s]=f)}}}"undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&h.WorkerGlobalScope&&h instanceof h.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(e._hasGetAll=!1)}var Pn,On=function(){function e(){}return e.prototype._parseStoresSpec=function(e,t){l(e).forEach((function(n){if(null!==e[n]){var r=e[n].split(",").map((function(e,t){var n=(e=e.trim()).replace(/([&*]|\+\+)/g,""),r=/^\[/.test(n)?n.match(/^\[(.*)\]$/)[1].split("+"):n;return hn(n,r||null,/\&/.test(e),/\*/.test(e),/\+\+/.test(e),f(r),0===t)})),o=r.shift();if(o.multi)throw new se.Schema("Primary key cannot be multi-valued");r.forEach((function(e){if(e.auto)throw new se.Schema("Only primary key can be marked as autoIncrement (++)");if(!e.keyPath)throw new se.Schema("Index must have a name and cannot be an empty string")})),t[n]=pn(n,o,r)}}))},e.prototype.stores=function(e){var t=this.db;this._cfg.storesSource=this._cfg.storesSource?d(this._cfg.storesSource,e):e;var n=t._versions,r={},o={};return n.forEach((function(e){d(r,e._cfg.storesSource),o=e._cfg.dbschema={},e._parseStoresSpec(r,o)})),t._dbSchema=o,kn(t,[t._allTables,t,t.Transaction.prototype]),xn(t,[t._allTables,t,t.Transaction.prototype,this._cfg.tables],l(o),o),t._storeNames=l(o),this},e.prototype.upgrade=function(e){return this._cfg.contentUpgrade=e,this},e}();function Mn(e){return lt((function(){return Ne.letThrough=!0,e()}))}function Dn(e){var t=e._state,n=e._deps.indexedDB;if(t.isBeingOpened||e.idbdb)return t.dbReadyPromise.then((function(){return t.dbOpenError?kt(t.dbOpenError):e}));G&&(t.openCanceller._stackHolder=J()),t.isBeingOpened=!0,t.dbOpenError=null,t.openComplete=!1;var r=t.dbReadyResolve,o=null;return We.race([t.openCanceller,new We((function(r,i){if(!n)throw new se.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL (not locally). If using old Safari versions, make sure to include indexedDB polyfill.");var a=e.name,u=t.autoSchema?n.open(a):n.open(a,Math.round(10*e.verno));if(!u)throw new se.MissingAPI("IndexedDB API not available");u.onerror=cn(i),u.onblocked=rt(e._fireOnBlocked),u.onupgradeneeded=rt((function(r){if(o=u.transaction,t.autoSchema&&!e._options.allowEmptyDB){u.onerror=ln,o.abort(),u.result.close();var s=n.deleteDatabase(a);s.onsuccess=s.onerror=rt((function(){i(new se.NoSuchDatabase("Database "+a+" doesnt exist"))}))}else{o.onerror=cn(i);var c=r.oldVersion>Math.pow(2,62)?0:r.oldVersion;e.idbdb=u.result,function(e,t,n,r){var o=e._dbSchema,i=e._createTransaction("readwrite",e._storeNames,o);i.create(n),i._completion.catch(r);var a=i._reject.bind(i),u=Ne.transless||Ne;lt((function(){Ne.trans=i,Ne.transless=u,0===t?(l(o).forEach((function(e){An(n,e,o[e].primKey,o[e].indexes)})),_n(e,n),We.follow((function(){return e.on.populate.fire(i)})).catch(a)):function(e,t,n,r){var o=[],i=e._versions,a=e._dbSchema=En(0,e.idbdb,r),u=!1;return i.filter((function(e){return e._cfg.version>=t})).forEach((function(i){o.push((function(){var o=a,s=i._cfg.dbschema;Sn(e,o,r),Sn(e,s,r),a=e._dbSchema=s;var c=function(e,t){var n,r={del:[],add:[],change:[]};for(n in e)t[n]||r.del.push(n);for(n in t){var o=e[n],i=t[n];if(o){var a={name:n,def:i,recreate:!1,del:[],add:[],change:[]};if(o.primKey.src===i.primKey.src||Mt){var u=o.idxByName,s=i.idxByName,c=void 0;for(c in u)s[c]||a.del.push(c);for(c in s){var l=u[c],f=s[c];l?l.src!==f.src&&a.change.push(f):a.add.push(f)}(a.del.length>0||a.add.length>0||a.change.length>0)&&r.change.push(a)}else a.recreate=!0,r.change.push(a)}else r.add.push([n,i])}return r}(o,s);c.add.forEach((function(e){An(r,e[0],e[1].primKey,e[1].indexes)})),c.change.forEach((function(e){if(e.recreate)throw new se.Upgrade("Not yet support for changing primary key");var t=r.objectStore(e.name);e.add.forEach((function(e){return Tn(t,e)})),e.change.forEach((function(e){t.deleteIndex(e.name),Tn(t,e)})),e.del.forEach((function(e){return t.deleteIndex(e)}))}));var f=i._cfg.contentUpgrade;if(f&&i._cfg.version>t){_n(e,r),u=!0;var h=M(s);c.del.forEach((function(e){h[e]=o[e]})),kn(e,[e.Transaction.prototype]),xn(e,[e.Transaction.prototype],l(h),h),n.schema=h;var d,p=H(f);p&&ft();var y=We.follow((function(){if((d=f(n))&&p){var e=ht.bind(null,null);d.then(e,e)}}));return d&&"function"==typeof d.then?We.resolve(d):y.then((function(){return d}))}})),o.push((function(t){u&&Dt||function(e,t){for(var n=0;n<t.db.objectStoreNames.length;++n){var r=t.db.objectStoreNames[n];null==e[r]&&t.db.deleteObjectStore(r)}}(i._cfg.dbschema,t),kn(e,[e.Transaction.prototype]),xn(e,[e.Transaction.prototype],e._storeNames,e._dbSchema),n.schema=e._dbSchema}))})),function e(){return o.length?We.resolve(o.shift()(n.idbtrans)).then(e):We.resolve()}().then((function(){var e,t;t=r,l(e=a).forEach((function(n){t.db.objectStoreNames.contains(n)||An(t,n,e[n].primKey,e[n].indexes)}))}))}(e,t,i,n).catch(a)}))}(e,c/10,o,i)}}),i),u.onsuccess=rt((function(){o=null;var n=e.idbdb=u.result,i=C(n.objectStoreNames);if(i.length>0)try{var s=n.transaction(un(i),"readonly");t.autoSchema?function(e,t,n){e.verno=t.version/10;var r=e._dbSchema=En(0,t,n);e._storeNames=C(t.objectStoreNames,0),xn(e,[e._allTables],l(r),r)}(e,n,s):Sn(e,e._dbSchema,s),_n(e,s)}catch(e){}Ot.push(e),n.onversionchange=rt((function(n){t.vcFired=!0,e.on("versionchange").fire(n)})),Pn.add(a),r()}),i)}))]).then((function(){return t.onReadyBeingFired=[],We.resolve(Mn(e.on.ready.fire)).then((function e(){if(t.onReadyBeingFired.length>0){var n=t.onReadyBeingFired.reduce(be,fe);return t.onReadyBeingFired=[],We.resolve(Mn(n)).then(e)}}))})).finally((function(){t.onReadyBeingFired=null})).then((function(){return t.isBeingOpened=!1,e})).catch((function(n){try{o&&o.abort()}catch(e){}return t.isBeingOpened=!1,e.close(),t.dbOpenError=n,kt(t.dbOpenError)})).finally((function(){t.openComplete=!0,r()}))}function jn(e){var t=function(t){return e.next(t)},n=o(t),r=o((function(t){return e.throw(t)}));function o(e){return function(t){var o=e(t),i=o.value;return o.done?i:i&&"function"==typeof i.then?i.then(n,r):f(i)?Promise.all(i).then(n,r):n(i)}}return o(t)()}function Bn(e,t,n){var r=arguments.length;if(r<2)throw new se.InvalidArgument("Too few arguments");for(var o=new Array(r-1);--r;)o[r-1]=arguments[r];n=o.pop();var i=j(o);return[e,i,n]}function Kn(e,t,n,r,o){return We.resolve().then((function(){var i=Ne.transless||Ne,a=e._createTransaction(t,n,e._dbSchema,r),u={trans:a,transless:i};r?a.idbtrans=r.idbtrans:a.create();var s,c=H(o);c&&ft();var l=We.follow((function(){if(s=o.call(a,a))if(c){var e=ht.bind(null,null);s.then(e,e)}else"function"==typeof s.next&&"function"==typeof s.throw&&(s=jn(s))}),u);return(s&&"function"==typeof s.then?We.resolve(s).then((function(e){return a.active?e:kt(new se.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"))})):l.then((function(){return s}))).then((function(e){return r&&a._resolve(),a._completion.then((function(){return e}))})).catch((function(e){return a._reject(e),kt(e)}))}))}function qn(e,t,n){for(var r=f(e)?e.slice():[e],o=0;o<n;++o)r.push(t);return r}var In={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:function(e){return s(s({},e),{table:function(t){var n=e.table(t),r=n.schema,o={},i=[];function a(e,t,n){var r=bn(e),u=o[r]=o[r]||[],c=null==e?0:"string"==typeof e?1:e.length,l=t>0,f=s(s({},n),{isVirtual:l,isPrimaryKey:!l&&n.isPrimaryKey,keyTail:t,keyLength:c,extractKey:yn(e),unique:!l&&n.unique});return u.push(f),f.isPrimaryKey||i.push(f),c>1&&a(2===c?e[0]:e.slice(0,c-1),t+1,n),u.sort((function(e,t){return e.keyTail-t.keyTail})),f}var u=a(r.primaryKey.keyPath,0,r.primaryKey);o[":id"]=[u];for(var c=0,l=r.indexes;c<l.length;c++){var f=l[c];a(f.keyPath,0,f)}function h(t){var n,r,o=t.query.index;return o.isVirtual?s(s({},t),{query:{index:o,range:(n=t.query.range,r=o.keyTail,{type:1===n.type?2:n.type,lower:qn(n.lower,n.lowerOpen?e.MAX_KEY:e.MIN_KEY,r),lowerOpen:!0,upper:qn(n.upper,n.upperOpen?e.MIN_KEY:e.MAX_KEY,r),upperOpen:!0})}}):t}return s(s({},n),{schema:s(s({},r),{primaryKey:u,indexes:i,getIndexByKeyPath:function(e){var t=o[bn(e)];return t&&t[0]}}),count:function(e){return n.count(h(e))},query:function(e){return n.query(h(e))},openCursor:function(t){var r=t.query.index,o=r.keyTail,i=r.isVirtual,a=r.keyLength;return i?n.openCursor(h(t)).then((function(n){return n&&function(n){return Object.create(n,{continue:{value:function(r){null!=r?n.continue(qn(r,t.reverse?e.MAX_KEY:e.MIN_KEY,o)):t.unique?n.continue(qn(n.key,t.reverse?e.MIN_KEY:e.MAX_KEY,o)):n.continue()}},continuePrimaryKey:{value:function(t,r){n.continuePrimaryKey(qn(t,e.MAX_KEY,o),r)}},key:{get:function(){var e=n.key;return 1===a?e[0]:e.slice(0,a)}},value:{get:function(){return n.value}}})}(n)})):n.openCursor(t)}})}})}},Nn={stack:"dbcore",name:"HooksMiddleware",level:2,create:function(e){return s(s({},e),{table:function(t){var n=e.table(t),r=n.schema.primaryKey;return s(s({},n),{mutate:function(e){var o=Ne.trans,i=o.table(t).hook,a=i.deleting,u=i.creating,l=i.updating;switch(e.type){case"add":if(u.fire===fe)break;return o._promise("readwrite",(function(){return f(e)}),!0);case"put":if(u.fire===fe&&l.fire===fe)break;return o._promise("readwrite",(function(){return f(e)}),!0);case"delete":if(a.fire===fe)break;return o._promise("readwrite",(function(){return f(e)}),!0);case"deleteRange":if(a.fire===fe)break;return o._promise("readwrite",(function(){return function(e){return h(e.trans,e.range,1e4)}(e)}),!0)}return n.mutate(e);function f(e){var t=Ne.trans,o=e.keys||mn(r,e);if(!o)throw new Error("Keys missing");return"delete"!==(e="add"===e.type||"put"===e.type?s(s({},e),{keys:o,wantResults:!0}):s({},e)).type&&(e.values=c(e.values)),e.keys&&(e.keys=c(e.keys)),function(e,t,n){return"add"===t.type?Promise.resolve(new Array(t.values.length)):e.getMany({trans:t.trans,keys:n})}(n,e,o).then((function(i){var s=o.map((function(n,o){var s=i[o],c={onerror:null,onsuccess:null};if("delete"===e.type)a.fire.call(c,n,s,t);else if("add"===e.type||void 0===s){var f=u.fire.call(c,n,e.values[o],t);null==n&&null!=f&&(n=f,e.keys[o]=n,r.outbound||O(e.values[o],r.keyPath,n))}else{var h=U(s,e.values[o]),d=l.fire.call(c,h,n,s,t);if(d){var p=e.values[o];Object.keys(d).forEach((function(e){O(p,e,d[e])}))}}return c}));return n.mutate(e).then((function(t){for(var n=t.failures,r=t.results,a=t.numFailures,u=t.lastResult,c=0;c<o.length;++c){var l=r?r[c]:o[c],f=s[c];null==l?f.onerror&&f.onerror(n[c]):f.onsuccess&&f.onsuccess("put"===e.type&&i[c]?e.values[c]:l)}return{failures:n,results:r,numFailures:a,lastResult:u}})).catch((function(e){return s.forEach((function(t){return t.onerror&&t.onerror(e)})),Promise.reject(e)}))}))}function h(e,t,o){return n.query({trans:e,values:!1,query:{index:r,range:t},limit:o}).then((function(n){var r=n.result;return f({type:"delete",keys:r,trans:e}).then((function(n){return n.numFailures>0?Promise.reject(n.failures[0]):r.length<o?{failures:[],numFailures:0,lastResult:void 0}:h(e,s(s({},t),{lower:r[r.length-1],lowerOpen:!0}),o)}))}))}}})}})}},Rn=function(){function e(t,n){var r=this;this._middlewares={},this.verno=0;var o=e.dependencies;this._options=n=s({addons:e.addons,autoOpen:!0,indexedDB:o.indexedDB,IDBKeyRange:o.IDBKeyRange},n),this._deps={indexedDB:n.indexedDB,IDBKeyRange:n.IDBKeyRange};var i=n.addons;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null;var a,u={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:fe,dbReadyPromise:null,cancelOpen:fe,openCanceller:null,autoSchema:!0};u.dbReadyPromise=new We((function(e){u.dbReadyResolve=e})),u.openCanceller=new We((function(e,t){u.cancelOpen=t})),this._state=u,this.name=t,this.on=Ut(this,"populate","blocked","versionchange",{ready:[be,fe]}),this.on.ready.subscribe=A(this.on.ready.subscribe,(function(t){return function(n,o){e.vip((function(){var e=r._state;if(e.openComplete)e.dbOpenError||We.resolve().then(n),o&&t(n);else if(e.onReadyBeingFired)e.onReadyBeingFired.push(n),o&&t(n);else{t(n);var i=r;o||t((function e(){i.on.ready.unsubscribe(n),i.on.ready.unsubscribe(e)}))}}))}})),this.Collection=(a=this,Wt(Vt.prototype,(function(e,t){this.db=a;var n=Rt,r=null;if(t)try{n=t()}catch(e){r=e}var o=e._ctx,i=o.table,u=i.hook.reading.fire;this._ctx={table:i,index:o.index,isPrimKey:!o.index||i.schema.primKey.keyPath&&o.index===i.schema.primKey.name,range:n,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:r,or:o.or,valueMapper:u!==he?u:null}}))),this.Table=function(e){return Wt(Ft.prototype,(function(t,n,r){this.db=e,this._tx=r,this.name=t,this.schema=n,this.hook=e._allTables[t]?e._allTables[t].hook:Ut(null,{creating:[ye,fe],reading:[de,he],updating:[ve,fe],deleting:[me,fe]})}))}(this),this.Transaction=function(e){return Wt(fn.prototype,(function(t,n,r,o){var i=this;this.db=e,this.mode=t,this.storeNames=n,this.schema=r,this.idbtrans=null,this.on=Ut(this,"complete","error","abort"),this.parent=o||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new We((function(e,t){i._resolve=e,i._reject=t})),this._completion.then((function(){i.active=!1,i.on.complete.fire()}),(function(e){var t=i.active;return i.active=!1,i.on.error.fire(e),i.parent?i.parent._reject(e):t&&i.idbtrans&&i.idbtrans.abort(),kt(e)}))}))}(this),this.Version=function(e){return Wt(On.prototype,(function(t){this.db=e,this._cfg={version:t,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}}))}(this),this.WhereClause=function(e){return Wt(an.prototype,(function(t,n,r){this.db=e,this._ctx={table:t,index:":id"===n?null:n,or:r};var o=e._deps.indexedDB;if(!o)throw new se.MissingAPI("indexedDB API missing");this._cmp=this._ascending=o.cmp.bind(o),this._descending=function(e,t){return o.cmp(t,e)},this._max=function(e,t){return o.cmp(e,t)>0?e:t},this._min=function(e,t){return o.cmp(e,t)<0?e:t},this._IDBKeyRange=e._deps.IDBKeyRange}))}(this),this.on("versionchange",(function(e){e.newVersion>0?console.warn("Another connection wants to upgrade database '"+r.name+"'. Closing db now to resume the upgrade."):console.warn("Another connection wants to delete database '"+r.name+"'. Closing db now to resume the delete request."),r.close()})),this.on("blocked",(function(e){!e.newVersion||e.newVersion<e.oldVersion?console.warn("Dexie.delete('"+r.name+"') was blocked"):console.warn("Upgrade '"+r.name+"' blocked by other connection holding version "+e.oldVersion/10)})),this._maxKey=sn(n.IDBKeyRange),this._createTransaction=function(e,t,n,o){return new r.Transaction(e,t,n,o)},this._fireOnBlocked=function(e){r.on("blocked").fire(e),Ot.filter((function(e){return e.name===r.name&&e!==r&&!e._state.vcFired})).map((function(t){return t.on("versionchange").fire(e)}))},this.use(In),this.use(Nn),i.forEach((function(e){return e(r)}))}return e.prototype.version=function(e){if(isNaN(e)||e<.1)throw new se.Type("Given version is not a positive number");if(e=Math.round(10*e)/10,this.idbdb||this._state.isBeingOpened)throw new se.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,e);var t=this._versions,n=t.filter((function(t){return t._cfg.version===e}))[0];return n||(n=new this.Version(e),t.push(n),t.sort(Cn),n.stores({}),this._state.autoSchema=!1,n)},e.prototype._whenReady=function(e){var t=this;return this._state.openComplete||Ne.letThrough?e():new We((function(e,n){if(!t._state.isBeingOpened){if(!t._options.autoOpen)return void n(new se.DatabaseClosed);t.open().catch(fe)}t._state.dbReadyPromise.then(e,n)})).then(e)},e.prototype.use=function(e){var t=e.stack,n=e.create,r=e.level,o=e.name;o&&this.unuse({stack:t,name:o});var i=this._middlewares[t]||(this._middlewares[t]=[]);return i.push({stack:t,create:n,level:null==r?10:r,name:o}),i.sort((function(e,t){return e.level-t.level})),this},e.prototype.unuse=function(e){var t=e.stack,n=e.name,r=e.create;return t&&this._middlewares[t]&&(this._middlewares[t]=this._middlewares[t].filter((function(e){return r?e.create!==r:!!n&&e.name!==n}))),this},e.prototype.open=function(){return Dn(this)},e.prototype.close=function(){var e=Ot.indexOf(this),t=this._state;if(e>=0&&Ot.splice(e,1),this.idbdb){try{this.idbdb.close()}catch(e){}this.idbdb=null}this._options.autoOpen=!1,t.dbOpenError=new se.DatabaseClosed,t.isBeingOpened&&t.cancelOpen(t.dbOpenError),t.dbReadyPromise=new We((function(e){t.dbReadyResolve=e})),t.openCanceller=new We((function(e,n){t.cancelOpen=n}))},e.prototype.delete=function(){var e=this,t=arguments.length>0,n=this._state;return new We((function(r,o){var i=function(){e.close();var t=e._deps.indexedDB.deleteDatabase(e.name);t.onsuccess=rt((function(){Pn.remove(e.name),r()})),t.onerror=cn(o),t.onblocked=e._fireOnBlocked};if(t)throw new se.InvalidArgument("Arguments not allowed in db.delete()");n.isBeingOpened?n.dbReadyPromise.then(i):i()}))},e.prototype.backendDB=function(){return this.idbdb},e.prototype.isOpen=function(){return null!==this.idbdb},e.prototype.hasBeenClosed=function(){var e=this._state.dbOpenError;return e&&"DatabaseClosed"===e.name},e.prototype.hasFailed=function(){return null!==this._state.dbOpenError},e.prototype.dynamicallyOpened=function(){return this._state.autoSchema},Object.defineProperty(e.prototype,"tables",{get:function(){var e=this;return l(this._allTables).map((function(t){return e._allTables[t]}))},enumerable:!0,configurable:!0}),e.prototype.transaction=function(){var e=Bn.apply(this,arguments);return this._transaction.apply(this,e)},e.prototype._transaction=function(e,t,n){var r=this,o=Ne.trans;o&&o.db===this&&-1===e.indexOf("!")||(o=null);var i,a,u=-1!==e.indexOf("?");e=e.replace("!","").replace("?","");try{if(a=t.map((function(e){var t=e instanceof r.Table?e.name:e;if("string"!=typeof t)throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return t})),"r"==e||e===qt)i=qt;else{if("rw"!=e&&e!=It)throw new se.InvalidArgument("Invalid transaction mode: "+e);i=It}if(o){if(o.mode===qt&&i===It){if(!u)throw new se.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");o=null}o&&a.forEach((function(e){if(o&&-1===o.storeNames.indexOf(e)){if(!u)throw new se.SubTransaction("Table "+e+" not included in parent transaction.");o=null}})),u&&o&&!o.active&&(o=null)}}catch(e){return o?o._promise(null,(function(t,n){n(e)})):kt(e)}var s=Kn.bind(null,this,i,a,o,n);return o?o._promise(i,s,"lock"):Ne.trans?gt(Ne.transless,(function(){return r._whenReady(s)})):this._whenReady(s)},e.prototype.table=function(e){if(!m(this._allTables,e))throw new se.InvalidTable("Table "+e+" does not exist");return this._allTables[e]},e}(),Fn=Rn;v(Fn,s(s({},le),{delete:function(e){return new Fn(e).delete()},exists:function(e){return new Fn(e,{addons:[]}).open().then((function(e){return e.close(),!0})).catch("NoSuchDatabaseError",(function(){return!1}))},getDatabaseNames:function(e){return Pn?Pn.getDatabaseNames().then(e):We.resolve([])},defineClass:function(){return function(e){d(this,e)}},ignoreTransaction:function(e){return Ne.trans?gt(Ne.transless,e):e()},vip:Mn,async:function(e){return function(){try{var t=jn(e.apply(this,arguments));return t&&"function"==typeof t.then?t:We.resolve(t)}catch(e){return kt(e)}}},spawn:function(e,t,n){try{var r=jn(e.apply(n,t||[]));return r&&"function"==typeof r.then?r:We.resolve(r)}catch(e){return kt(e)}},currentTransaction:{get:function(){return Ne.trans||null}},waitFor:function(e,t){var n=We.resolve("function"==typeof e?Fn.ignoreTransaction(e):e).timeout(t||6e4);return Ne.trans?Ne.trans.waitFor(n):n},Promise:We,debug:{get:function(){return G},set:function(e){X(e,"dexie"===e?function(){return!0}:Bt)}},derive:w,extend:d,props:v,override:A,Events:Ut,getByKeyPath:P,setByKeyPath:O,delByKeyPath:function(e,t){"string"==typeof t?O(e,t,void 0):"length"in t&&[].map.call(t,(function(t){O(e,t,void 0)}))},shallowClone:M,deepClone:I,getObjectDiff:U,asap:E,minKey:Et,addons:[],connections:Ot,errnames:ae,dependencies:function(){try{return{indexedDB:h.indexedDB||h.mozIndexedDB||h.webkitIndexedDB||h.msIndexedDB,IDBKeyRange:h.IDBKeyRange||h.webkitIDBKeyRange}}catch(e){return{indexedDB:null,IDBKeyRange:null}}}(),semVer:At,version:At.split(".").map((function(e){return parseInt(e)})).reduce((function(e,t,n){return e+t/Math.pow(10,2*n)})),default:Fn,Dexie:Fn})),Fn.maxKey=sn(Fn.dependencies.IDBKeyRange),function(e){try{Pn=function(e){var t,n=e&&"function"==typeof e.databases;if(!n){var r=new Rn(Kt,{addons:[]});r.version(1).stores({dbnames:"name"}),t=r.table("dbnames")}return{getDatabaseNames:function(){return n?We.resolve(e.databases()).then((function(e){return e.map((function(e){return e.name})).filter((function(e){return e!==Kt}))})):t.toCollection().primaryKeys()},add:function(e){return!n&&e!==Kt&&t.put({name:e}).catch(fe)},remove:function(e){return!n&&e!==Kt&&t.delete(e).catch(fe)}}}(e)}catch(e){}}(Rn.dependencies.indexedDB),We.rejectionMapper=function(e,t){if(!e||e instanceof ne||e instanceof TypeError||e instanceof SyntaxError||!e.name||!ce[e.name])return e;var n=new ce[e.name](t||e.message,e);return"stack"in e&&b(n,"stack",{get:function(){return this.inner.stack}}),n},X(G,Bt);const Un=Rn;var Wn=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},Ln=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};const Yn=function(){function t(){this.db=new Un("LogsDatabase"),this.db.version(1).stores({logs:"id,project"})}return t.prototype.getAllLogs=function(){return Wn(this,void 0,void 0,(function(){var e,t,n;return Ln(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,5]),[4,fetch("http://localhost:3030/logs")];case 1:return e=r.sent(),t=this,[4,e.json()];case 2:return t.logs=r.sent(),this.db.table("logs").clear(),this.db.table("logs").bulkAdd(this.logs),[3,5];case 3:return r.sent(),n=this,[4,this.db.table("logs").toArray()];case 4:return n.logs=r.sent(),[3,5];case 5:return this.logMap=this.getLogsSortedByDay(this.logs),[2,this.logMap]}}))}))},t.prototype.deleteLog=function(e){return Wn(this,void 0,void 0,(function(){return Ln(this,(function(t){switch(t.label){case 0:return[4,fetch("http://localhost:3030/logs/"+e,{method:"DELETE"})];case 1:return[2,200===t.sent().status]}}))}))},t.prototype.createLog=function(e){return Wn(this,void 0,void 0,(function(){var t;return Ln(this,(function(n){switch(n.label){case 0:return[4,fetch("http://localhost:3030/logs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})];case 1:return[4,n.sent().json()];case 2:return t=n.sent(),this.logs.push(t),this.logMap=this.getLogsSortedByDay(this.logs),[2,t]}}))}))},t.prototype.updateLog=function(e){return Wn(this,void 0,void 0,(function(){return Ln(this,(function(t){switch(t.label){case 0:return[4,fetch("http://localhost:3030/logs/"+e.id,{method:"PUT",body:JSON.stringify(e)})];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},t.prototype.getLogsSortedByDay=function(t){return t.sort((function(e,t){return t.from-e.from})).reduce((function(t,n){var r,o=new Date(n.from);return t.forEach((function(t,n){(function(t,n){e(2,arguments);var r=u(t),o=u(n);return r.getTime()===o.getTime()})(n,o)&&(r=n)})),r?t.set(r,function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,u=i.length;a<u;a++,o++)r[o]=i[a];return r}(t.get(r),[n])):t.set(o,[n]),t}),new Map)},t}();function zn(n){e(1,arguments);var r=t(n);return!isNaN(r)}var Hn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Gn(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var Xn,Qn={date:Gn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Gn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Gn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Vn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Jn(e){return function(t,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,a=o.width?String(o.width):i;r=e.formattingValues[a]||e.formattingValues[i]}else{var u=e.defaultWidth,s=o.width?String(o.width):e.defaultWidth;r=e.values[s]||e.values[u]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function Zn(e){return function(t,n){var r=String(t),o=n||{},i=o.width,a=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],u=r.match(a);if(!u)return null;var s,c=u[0],l=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth];return s="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(c))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(c))return n}(l),s=e.valueCallback?e.valueCallback(s):s,{value:s=o.valueCallback?o.valueCallback(s):s,rest:r.slice(c.length)}}}const $n={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof Hn[e]?Hn[e]:1===t?Hn[e].one:Hn[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:Qn,formatRelative:function(e,t,n,r){return Vn[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Jn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Jn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:Jn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Jn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Jn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Xn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},o=n.match(Xn.matchPattern);if(!o)return null;var i=o[0],a=n.match(Xn.parsePattern);if(!a)return null;var u=Xn.valueCallback?Xn.valueCallback(a[0]):a[0];return{value:u=r.valueCallback?r.valueCallback(u):u,rest:n.slice(i.length)}}),era:Zn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Zn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Zn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Zn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Zn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function er(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function tr(n,r){e(2,arguments);var o=t(n).getTime(),i=er(r);return new Date(o+i)}function nr(t,n){e(2,arguments);var r=er(n);return tr(t,-r)}function rr(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const or=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return rr("yy"===t?r%100:r,t.length)},ir=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):rr(n+1,2)},ar=function(e,t){return rr(e.getUTCDate(),t.length)},ur=function(e,t){return rr(e.getUTCHours()%12||12,t.length)},sr=function(e,t){return rr(e.getUTCHours(),t.length)},cr=function(e,t){return rr(e.getUTCMinutes(),t.length)},lr=function(e,t){return rr(e.getUTCSeconds(),t.length)},fr=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return rr(Math.floor(r*Math.pow(10,n-3)),t.length)};var hr=864e5;function dr(n){e(1,arguments);var r=1,o=t(n),i=o.getUTCDay(),a=(i<r?7:0)+i-r;return o.setUTCDate(o.getUTCDate()-a),o.setUTCHours(0,0,0,0),o}function pr(n){e(1,arguments);var r=t(n),o=r.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(o+1,0,4),i.setUTCHours(0,0,0,0);var a=dr(i),u=new Date(0);u.setUTCFullYear(o,0,4),u.setUTCHours(0,0,0,0);var s=dr(u);return r.getTime()>=a.getTime()?o+1:r.getTime()>=s.getTime()?o:o-1}function yr(t){e(1,arguments);var n=pr(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var o=dr(r);return o}var mr=6048e5;function vr(n,r){e(1,arguments);var o=r||{},i=o.locale,a=i&&i.options&&i.options.weekStartsOn,u=null==a?0:er(a),s=null==o.weekStartsOn?u:er(o.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=t(n),l=c.getUTCDay(),f=(l<s?7:0)+l-s;return c.setUTCDate(c.getUTCDate()-f),c.setUTCHours(0,0,0,0),c}function gr(n,r){e(1,arguments);var o=t(n,r),i=o.getUTCFullYear(),a=r||{},u=a.locale,s=u&&u.options&&u.options.firstWeekContainsDate,c=null==s?1:er(s),l=null==a.firstWeekContainsDate?c:er(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(i+1,0,l),f.setUTCHours(0,0,0,0);var h=vr(f,r),d=new Date(0);d.setUTCFullYear(i,0,l),d.setUTCHours(0,0,0,0);var p=vr(d,r);return o.getTime()>=h.getTime()?i+1:o.getTime()>=p.getTime()?i:i-1}function br(t,n){e(1,arguments);var r=n||{},o=r.locale,i=o&&o.options&&o.options.firstWeekContainsDate,a=null==i?1:er(i),u=null==r.firstWeekContainsDate?a:er(r.firstWeekContainsDate),s=gr(t,n),c=new Date(0);c.setUTCFullYear(s,0,u),c.setUTCHours(0,0,0,0);var l=vr(c,n);return l}var wr=6048e5;function _r(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),i=r%60;if(0===i)return n+String(o);var a=t||"";return n+String(o)+a+rr(i,2)}function xr(e,t){return e%60==0?(e>0?"-":"+")+rr(Math.abs(e)/60,2):kr(e,t)}function kr(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+rr(Math.floor(o/60),2)+n+rr(o%60,2)}const Cr={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return or(e,t)},Y:function(e,t,n,r){var o=gr(e,r),i=o>0?o:1-o;return"YY"===t?rr(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):rr(i,t.length)},R:function(e,t){return rr(pr(e),t.length)},u:function(e,t){return rr(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return rr(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return rr(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return ir(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return rr(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(n,r,o,i){var a=function(n,r){e(1,arguments);var o=t(n),i=vr(o,r).getTime()-br(o,r).getTime();return Math.round(i/wr)+1}(n,i);return"wo"===r?o.ordinalNumber(a,{unit:"week"}):rr(a,r.length)},I:function(n,r,o){var i=function(n){e(1,arguments);var r=t(n),o=dr(r).getTime()-yr(r).getTime();return Math.round(o/mr)+1}(n);return"Io"===r?o.ordinalNumber(i,{unit:"week"}):rr(i,r.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ar(e,t)},D:function(n,r,o){var i=function(n){e(1,arguments);var r=t(n),o=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var i=r.getTime(),a=o-i;return Math.floor(a/hr)+1}(n);return"Do"===r?o.ordinalNumber(i,{unit:"dayOfYear"}):rr(i,r.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return rr(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});case"eeee":default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return rr(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});case"cccc":default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return rr(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return ur(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):sr(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):rr(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):rr(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):cr(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):lr(e,t)},S:function(e,t){return fr(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return xr(o);case"XXXX":case"XX":return kr(o);case"XXXXX":case"XXX":default:return kr(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return xr(o);case"xxxx":case"xx":return kr(o);case"xxxxx":case"xxx":default:return kr(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+_r(o,":");case"OOOO":default:return"GMT"+kr(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+_r(o,":");case"zzzz":default:return"GMT"+kr(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return rr(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return rr((r._originalDate||e).getTime(),t.length)}};function Ar(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function Tr(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const Er={p:Tr,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),o=r[1],i=r[2];if(!i)return Ar(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Ar(o,t)).replace("{{time}}",Tr(i,t))}};var Sr=6e4;function Pr(e){return e.getTime()%Sr}function Or(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var r=n>0?(Sr+Pr(t))%Sr:Pr(t);return n*Sr+r}var Mr=["D","DD"],Dr=["YY","YYYY"];function jr(e){return-1!==Mr.indexOf(e)}function Br(e){return-1!==Dr.indexOf(e)}function Kr(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var qr=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ir=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Nr=/^'([^]*?)'?$/,Rr=/''/g,Fr=/[a-zA-Z]/;function Ur(n,r,o){e(2,arguments);var i=String(r),a=o||{},u=a.locale||$n,s=u.options&&u.options.firstWeekContainsDate,c=null==s?1:er(s),l=null==a.firstWeekContainsDate?c:er(a.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=u.options&&u.options.weekStartsOn,h=null==f?0:er(f),d=null==a.weekStartsOn?h:er(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var p=t(n);if(!zn(p))throw new RangeError("Invalid time value");var y=Or(p),m=nr(p,y),v={firstWeekContainsDate:l,weekStartsOn:d,locale:u,_originalDate:p},g=i.match(Ir).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Er[t])(e,u.formatLong,v):e})).join("").match(qr).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return Wr(e);var o=Cr[t];if(o)return!a.useAdditionalWeekYearTokens&&Br(e)&&Kr(e,r,n),!a.useAdditionalDayOfYearTokens&&jr(e)&&Kr(e,r,n),o(m,e,u.localize,v);if(t.match(Fr))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return g}function Wr(e){return e.match(Nr)[1].replace(Rr,"'")}var Lr=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))},Yr=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};const zr=function(){function e(e,t){this.mountPoint=e,this.logModel=t}return e.prototype.createCell=function(e,t){var n="number"==typeof e?e.toString():e,r=document.createElement("td");return r.innerText=n,t&&Object.keys(t).forEach((function(e){r.setAttribute(e,t[e])})),r},e.prototype.createDateCell=function(e){var t=Ur(e,"dd.MM.yyyy");return this.createCell(t)},e.prototype.createTimeCell=function(e){var t=Ur(e,"HH:mm");return this.createCell(t)},e.prototype.createDurationCell=function(e,t){var n=e;t&&(n=o(t,e));var r=i(n);return this.createCell(r)},e.prototype.createHeaderRow=function(e){var t=document.createElement("tr");return t.className="header",t.appendChild(this.createCell(Ur(e,"EEEE, dd.MM.yyyy"),{colspan:"6"})),t},e.prototype.createFooterRow=function(e){var t=document.createElement("tr");return t.className="footer",t.appendChild(this.createCell("sum",{colspan:"4"})),t.appendChild(this.createDurationCell(e)),t.appendChild(this.createCell("")),t},e.prototype.buildBlock=function(e,t,n){var r=this;e.appendChild(this.createHeaderRow(t));var i=0;return n.map((function(e){return i+=o(e.until,e.from),e})).map((function(e){var t=document.createElement("tr");return t.id=e.id.toString(),t.appendChild(r.createCell(e.project)),t.appendChild(r.createDateCell(e.from)),t.appendChild(r.createTimeCell(e.from)),t.appendChild(r.createTimeCell(e.until)),t.appendChild(r.createDurationCell(e.from,e.until)),t.appendChild(r.createDeleteButtonCell()),t})).forEach((function(t){return e.append(t)})),e.appendChild(this.createFooterRow(i)),e},e.prototype.createDeleteButtonCell=function(){var e=document.createElement("td"),t=document.createElement("button");return t.innerText="🗑",e.appendChild(t),e},e.prototype.buildTable=function(e){var t=this,n=document.createElement("tbody");return e.forEach((function(e,r){t.buildBlock(n,r,e)})),n},e.prototype.init=function(){return Lr(this,void 0,void 0,(function(){return Yr(this,(function(e){switch(e.label){case 0:return[4,this.logModel.getAllLogs()];case 1:return e.sent(),[2]}}))}))},e.prototype.handleDelete=function(e){return Lr(this,void 0,void 0,(function(){var t,n;return Yr(this,(function(r){switch(r.label){case 0:return e.target instanceof HTMLElement?(t=e.target.closest("tr"),n=parseInt(t.id,10),[4,this.logModel.deleteLog(n)]):[3,2];case 1:r.sent()&&t.remove(),r.label=2;case 2:return[2]}}))}))},e.prototype.render=function(){var e,t=this.buildTable(this.logModel.logMap);null===(e=this.mountPoint.querySelector("tbody"))||void 0===e||e.remove(),this.mountPoint.appendChild(t)},e}();var Hr=n(379),Gr=n.n(Hr),Xr=n(192);Gr()(Xr.Z,{insert:"head",singleton:!1}),Xr.Z.locals;document.addEventListener("DOMContentLoaded",(function(){return e=this,t=void 0,r=function(){var e,t,n,r;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}(this,(function(o){switch(o.label){case 0:return e=document.querySelector("table"),t=document.querySelector("form"),n=new Yn,[4,(r=new zr(e,n)).init()];case 1:return o.sent(),r.render(),[4,new a(t,n,r).init()];case 2:return o.sent(),e.addEventListener("click",r.handleDelete.bind(r)),Notification.requestPermission((function(e){console.log(e)})),[2]}}))},new((n=void 0)||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r})),"serviceWorker"in navigator&&window.addEventListener("load",(function(){navigator.serviceWorker.register("/service-worker.js").then((function(e){console.log("SW registered: ",e)})).catch((function(e){console.log("SW registration failed: ",e)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"@media(max-width: 960px){body{flex-direction:column-reverse}body form{display:flex}body form #from,body form #until,body form #date{width:70px}body form label{display:none}}body{display:flex}form{order:2;padding-left:20px}form label{display:inline-block;width:50px}form fieldset{border:none}table{border-collapse:collapse}table tr.header td{font-weight:bold}table tr.footer{border-top:1px solid #000;border-bottom:3px solid #000}table tr th{border-bottom:1px solid #000}table tr td{padding:5px 10px}table tr:nth-child(2n) td{background:#e8e8e8}","",{version:3,sources:["webpack://src/style.scss"],names:[],mappings:"AAAA,yBACE,KACE,6BAAA,CACA,UACE,YAAA,CAEA,iDAGE,UAAA,CAEF,gBACE,YAAA,CAAA,CAMR,KACE,YAAA,CAGF,KACE,OAAA,CAEA,iBAAA,CAEA,WACE,oBAAA,CACA,UAAA,CAGF,cACE,WAAA,CAIJ,MACE,wBAAA,CAII,mBACE,gBAAA,CAIJ,gBACE,yBAAA,CACA,4BAAA,CAGF,YACE,4BAAA,CAKF,YACE,gBAAA,CAKF,0BACE,kBAAA",sourcesContent:["@media (max-width: 960px) {\n  body {\n    flex-direction: column-reverse;\n    form {\n      display: flex;\n\n      #from,\n      #until,\n      #date {\n        width: 70px;\n      }\n      label {\n        display: none;\n      }\n    }\n  }\n}\n\nbody {\n  display: flex;\n}\n\nform {\n  order: 2;\n\n  padding-left: 20px;\n\n  label {\n    display: inline-block;\n    width: 50px;\n  }\n\n  fieldset {\n    border: none;\n  }\n}\n\ntable {\n  border-collapse: collapse;\n\n  tr {\n    &.header {\n      td {\n        font-weight: bold;\n      }\n    }\n\n    &.footer {\n      border-top: 1px solid black;\n      border-bottom: 3px solid black;\n    }\n\n    th {\n      border-bottom: 1px solid black;\n    }\n  }\n\n  tr {\n    td {\n      padding: 5px 10px;\n    }\n  }\n\n  tr:nth-child(2n) {\n    td {\n      background: #e8e8e8;\n    }\n  }\n}\n"],sourceRoot:""}]);const u=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var u=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),s="/*# ".concat(c," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([s]).join("\n")}return[o].join("\n")}},379:(e,t,n)=>{var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function i(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],a=0;a<e.length;a++){var u=e[a],c=t.base?u[0]+t.base:u[0],s=n[c]||0,l="".concat(c," ").concat(s);n[c]=s+1;var d=i(l),f={css:u[1],media:u[2],sourceMap:u[3]};-1!==d?(o[d].references++,o[d].updater(f)):o.push({identifier:l,updater:g(f,t),references:1}),r.push(l)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,l=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,a;if(t.singleton){var o=m++;n=h||(h=c(t)),r=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=c(t),r=f.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=i(n[r]);o[a].references--}for(var c=u(e,t),s=0;s<n.length;s++){var l=i(n[s]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}n=c}}}}},t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(n,r){e(2,arguments);var a=t(n),o=t(r);return a.getTime()-o.getTime()}function a(t,n){e(2,arguments);var a=r(t,n)/1e3;return a>0?Math.floor(a):Math.ceil(a)}function o(e){var t=Math.abs(Math.floor(e/60)%60),n=Math.abs(Math.floor(e/3600));return isNaN(t)||isNaN(n)?"00:00":(n<10?"0"+n:n)+":"+(t<10?"0"+t:t)}const i=function(){function e(e,t,n){this.form=e,this.logModel=t,this.table=n}return e.prototype.init=function(){this.form.addEventListener("submit",this.handleSave.bind(this)),document.querySelector("#from").addEventListener("change",this.handleChange.bind(this)),document.querySelector("#until").addEventListener("change",this.handleChange.bind(this))},e.prototype.handleChange=function(){var e=document.querySelector("#from").value,t=document.querySelector("#until").value,n=a(new Date("1970-01-01T"+t+":00"),new Date("1970-01-01T"+e+":00"));document.querySelector("output").innerText=o(n)},e.prototype.clearForm=function(){document.querySelector("#project").value="",document.querySelector("#date").value="",document.querySelector("#from").value="",document.querySelector("#until").value=""},e.prototype.handleSave=function(e){return t=this,n=void 0,a=function(){var t,n,r,a,o;return function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(i){switch(i.label){case 0:return e.preventDefault(),t=document.querySelector("#project").value,n=document.querySelector("#date").value,r=document.querySelector("#from").value,a=document.querySelector("#until").value,o={project:t,from:new Date(n+"T"+r).getTime(),until:new Date(n+"T"+a).getTime()},[4,this.logModel.createLog(o)];case 1:return i.sent(),this.table.render(),this.clearForm(),[2]}}))},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{c(a.next(e))}catch(e){o(e)}}function u(e){try{c(a.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,u)}c((a=a.apply(t,n||[])).next())}));var t,n,r,a},e}();function u(n){e(1,arguments);var r=t(n);return r.setHours(0,0,0,0),r}var c=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function u(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},s=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};const l=function(){function t(){}return t.prototype.getAllLogs=function(){return c(this,void 0,void 0,(function(){var e,t;return s(this,(function(n){switch(n.label){case 0:return[4,fetch("http://localhost:3030/logs")];case 1:return e=n.sent(),t=this,[4,e.json()];case 2:return t.logs=n.sent(),this.logMap=this.getLogsSortedByDay(this.logs),[2,this.logMap]}}))}))},t.prototype.deleteLog=function(e){return c(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,fetch("http://localhost:3030/logs/"+e,{method:"DELETE"})];case 1:return[2,200===t.sent().status]}}))}))},t.prototype.createLog=function(e){return c(this,void 0,void 0,(function(){var t;return s(this,(function(n){switch(n.label){case 0:return[4,fetch("http://localhost:3030/logs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})];case 1:return[4,n.sent().json()];case 2:return t=n.sent(),this.logs.push(t),this.logMap=this.getLogsSortedByDay(this.logs),[2,t]}}))}))},t.prototype.updateLog=function(e){return c(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,fetch("http://localhost:3030/logs/"+e.id,{method:"PUT",body:JSON.stringify(e)})];case 1:return[4,t.sent().json()];case 2:return[2,t.sent()]}}))}))},t.prototype.getLogsSortedByDay=function(t){return t.sort((function(e,t){return t.from-e.from})).reduce((function(t,n){var r,a=new Date(n.from);return t.forEach((function(t,n){(function(t,n){e(2,arguments);var r=u(t),a=u(n);return r.getTime()===a.getTime()})(n,a)&&(r=n)})),r?t.set(r,function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,u=o.length;i<u;i++,a++)r[a]=o[i];return r}(t.get(r),[n])):t.set(a,[n]),t}),new Map)},t}();function d(n){e(1,arguments);var r=t(n);return!isNaN(r)}var f={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function h(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var m,g={date:h({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:h({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:h({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},p={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function b(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var u=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[u]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function v(e){return function(t,n){var r=String(t),a=n||{},o=a.width,i=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],u=r.match(i);if(!u)return null;var c,s=u[0],l=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(l),c=e.valueCallback?e.valueCallback(c):c,{value:c=a.valueCallback?a.valueCallback(c):c,rest:r.slice(s.length)}}}const y={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof f[e]?f[e]:1===t?f[e].one:f[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:g,formatRelative:function(e,t,n,r){return p[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:b({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:b({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:b({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:b({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:b({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(m={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},a=n.match(m.matchPattern);if(!a)return null;var o=a[0],i=n.match(m.parsePattern);if(!i)return null;var u=m.valueCallback?m.valueCallback(i[0]):i[0];return{value:u=r.valueCallback?r.valueCallback(u):u,rest:n.slice(o.length)}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function w(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function C(n,r){e(2,arguments);var a=t(n).getTime(),o=w(r);return new Date(a+o)}function T(t,n){e(2,arguments);var r=w(n);return C(t,-r)}function x(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const A=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return x("yy"===t?r%100:r,t.length)},M=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):x(n+1,2)},S=function(e,t){return x(e.getUTCDate(),t.length)},E=function(e,t){return x(e.getUTCHours()%12||12,t.length)},k=function(e,t){return x(e.getUTCHours(),t.length)},D=function(e,t){return x(e.getUTCMinutes(),t.length)},P=function(e,t){return x(e.getUTCSeconds(),t.length)},U=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return x(Math.floor(r*Math.pow(10,n-3)),t.length)};var O=864e5;function W(n){e(1,arguments);var r=1,a=t(n),o=a.getUTCDay(),i=(o<r?7:0)+o-r;return a.setUTCDate(a.getUTCDate()-i),a.setUTCHours(0,0,0,0),a}function q(n){e(1,arguments);var r=t(n),a=r.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var i=W(o),u=new Date(0);u.setUTCFullYear(a,0,4),u.setUTCHours(0,0,0,0);var c=W(u);return r.getTime()>=i.getTime()?a+1:r.getTime()>=c.getTime()?a:a-1}function N(t){e(1,arguments);var n=q(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var a=W(r);return a}var j=6048e5;function Y(n,r){e(1,arguments);var a=r||{},o=a.locale,i=o&&o.options&&o.options.weekStartsOn,u=null==i?0:w(i),c=null==a.weekStartsOn?u:w(a.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=t(n),l=s.getUTCDay(),d=(l<c?7:0)+l-c;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function L(n,r){e(1,arguments);var a=t(n,r),o=a.getUTCFullYear(),i=r||{},u=i.locale,c=u&&u.options&&u.options.firstWeekContainsDate,s=null==c?1:w(c),l=null==i.firstWeekContainsDate?s:w(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(o+1,0,l),d.setUTCHours(0,0,0,0);var f=Y(d,r),h=new Date(0);h.setUTCFullYear(o,0,l),h.setUTCHours(0,0,0,0);var m=Y(h,r);return a.getTime()>=f.getTime()?o+1:a.getTime()>=m.getTime()?o:o-1}function B(t,n){e(1,arguments);var r=n||{},a=r.locale,o=a&&a.options&&a.options.firstWeekContainsDate,i=null==o?1:w(o),u=null==r.firstWeekContainsDate?i:w(r.firstWeekContainsDate),c=L(t,n),s=new Date(0);s.setUTCFullYear(c,0,u),s.setUTCHours(0,0,0,0);var l=Y(s,n);return l}var F=6048e5;function H(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+x(o,2)}function G(e,t){return e%60==0?(e>0?"-":"+")+x(Math.abs(e)/60,2):z(e,t)}function z(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+x(Math.floor(a/60),2)+n+x(a%60,2)}const R={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return A(e,t)},Y:function(e,t,n,r){var a=L(e,r),o=a>0?a:1-a;return"YY"===t?x(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):x(o,t.length)},R:function(e,t){return x(q(e),t.length)},u:function(e,t){return x(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return x(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return x(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return x(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(n,r,a,o){var i=function(n,r){e(1,arguments);var a=t(n),o=Y(a,r).getTime()-B(a,r).getTime();return Math.round(o/F)+1}(n,o);return"wo"===r?a.ordinalNumber(i,{unit:"week"}):x(i,r.length)},I:function(n,r,a){var o=function(n){e(1,arguments);var r=t(n),a=W(r).getTime()-N(r).getTime();return Math.round(a/j)+1}(n);return"Io"===r?a.ordinalNumber(o,{unit:"week"}):x(o,r.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):S(e,t)},D:function(n,r,a){var o=function(n){e(1,arguments);var r=t(n),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var o=r.getTime(),i=a-o;return Math.floor(i/O)+1}(n);return"Do"===r?a.ordinalNumber(o,{unit:"dayOfYear"}):x(o,r.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return x(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return x(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return x(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return E(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):k(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):D(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):P(e,t)},S:function(e,t){return U(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return G(a);case"XXXX":case"XX":return z(a);case"XXXXX":case"XXX":default:return z(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return G(a);case"xxxx":case"xx":return z(a);case"xxxxx":case"xxx":default:return z(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+H(a,":");case"OOOO":default:return"GMT"+z(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+H(a,":");case"zzzz":default:return"GMT"+z(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return x(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return x((r._originalDate||e).getTime(),t.length)}};function X(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function Q(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const I={p:Q,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return X(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",X(a,t)).replace("{{time}}",Q(o,t))}};var J=6e4;function _(e){return e.getTime()%J}function K(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var r=n>0?(J+_(t))%J:_(t);return n*J+r}var Z=["D","DD"],V=["YY","YYYY"];function $(e){return-1!==Z.indexOf(e)}function ee(e){return-1!==V.indexOf(e)}function te(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ne=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,re=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ae=/^'([^]*?)'?$/,oe=/''/g,ie=/[a-zA-Z]/;function ue(n,r,a){e(2,arguments);var o=String(r),i=a||{},u=i.locale||y,c=u.options&&u.options.firstWeekContainsDate,s=null==c?1:w(c),l=null==i.firstWeekContainsDate?s:w(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=u.options&&u.options.weekStartsOn,h=null==f?0:w(f),m=null==i.weekStartsOn?h:w(i.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var g=t(n);if(!d(g))throw new RangeError("Invalid time value");var p=K(g),b=T(g,p),v={firstWeekContainsDate:l,weekStartsOn:m,locale:u,_originalDate:g},C=o.match(re).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,I[t])(e,u.formatLong,v):e})).join("").match(ne).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return ce(e);var a=R[t];if(a)return!i.useAdditionalWeekYearTokens&&ee(e)&&te(e,r,n),!i.useAdditionalDayOfYearTokens&&$(e)&&te(e,r,n),a(b,e,u.localize,v);if(t.match(ie))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return C}function ce(e){return e.match(ae)[1].replace(oe,"'")}var se=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function u(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},le=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};const de=function(){function e(e,t){this.mountPoint=e,this.logModel=t}return e.prototype.createCell=function(e,t){var n="number"==typeof e?e.toString():e,r=document.createElement("td");return r.innerText=n,t&&Object.keys(t).forEach((function(e){r.setAttribute(e,t[e])})),r},e.prototype.createDateCell=function(e){var t=ue(e,"dd.MM.yyyy");return this.createCell(t)},e.prototype.createTimeCell=function(e){var t=ue(e,"HH:mm");return this.createCell(t)},e.prototype.createDurationCell=function(e,t){var n=e;t&&(n=a(t,e));var r=o(n);return this.createCell(r)},e.prototype.createHeaderRow=function(e){var t=document.createElement("tr");return t.className="header",t.appendChild(this.createCell(ue(e,"EEEE, dd.MM.yyyy"),{colspan:"6"})),t},e.prototype.createFooterRow=function(e){var t=document.createElement("tr");return t.className="footer",t.appendChild(this.createCell("sum",{colspan:"4"})),t.appendChild(this.createDurationCell(e)),t.appendChild(this.createCell("")),t},e.prototype.buildBlock=function(e,t,n){var r=this;e.appendChild(this.createHeaderRow(t));var o=0;return n.map((function(e){return o+=a(e.until,e.from),e})).map((function(e){var t=document.createElement("tr");return t.id=e.id.toString(),t.appendChild(r.createCell(e.project)),t.appendChild(r.createDateCell(e.from)),t.appendChild(r.createTimeCell(e.from)),t.appendChild(r.createTimeCell(e.until)),t.appendChild(r.createDurationCell(e.from,e.until)),t.appendChild(r.createDeleteButtonCell()),t})).forEach((function(t){return e.append(t)})),e.appendChild(this.createFooterRow(o)),e},e.prototype.createDeleteButtonCell=function(){var e=document.createElement("td"),t=document.createElement("button");return t.innerText="🗑",e.appendChild(t),e},e.prototype.buildTable=function(e){var t=this,n=document.createElement("tbody");return e.forEach((function(e,r){t.buildBlock(n,r,e)})),n},e.prototype.init=function(){return se(this,void 0,void 0,(function(){return le(this,(function(e){switch(e.label){case 0:return[4,this.logModel.getAllLogs()];case 1:return e.sent(),[2]}}))}))},e.prototype.handleDelete=function(e){return se(this,void 0,void 0,(function(){var t,n;return le(this,(function(r){switch(r.label){case 0:return e.target instanceof HTMLElement?(t=e.target.closest("tr"),n=parseInt(t.id,10),[4,this.logModel.deleteLog(n)]):[3,2];case 1:r.sent()&&t.remove(),r.label=2;case 2:return[2]}}))}))},e.prototype.render=function(){var e,t=this.buildTable(this.logModel.logMap);null===(e=this.mountPoint.querySelector("tbody"))||void 0===e||e.remove(),this.mountPoint.appendChild(t)},e}();var fe=n(379),he=n.n(fe),me=n(192);he()(me.Z,{insert:"head",singleton:!1}),me.Z.locals;document.addEventListener("DOMContentLoaded",(function(){return e=this,t=void 0,r=function(){var e,t,n,r;return function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(a){switch(a.label){case 0:return e=document.querySelector("table"),t=document.querySelector("form"),n=new l,[4,(r=new de(e,n)).init()];case 1:return a.sent(),r.render(),[4,new i(t,n,r).init()];case 2:return a.sent(),e.addEventListener("click",r.handleDelete.bind(r)),[2]}}))},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{c(r.next(e))}catch(e){o(e)}}function u(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r})),"serviceWorker"in navigator&&window.addEventListener("load",(function(){navigator.serviceWorker.register("/service-worker.js").then((function(e){console.log("SW registered: ",e)})).catch((function(e){console.log("SW registration failed: ",e)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> a387f7432d99cdf4a538edc5439e7f71e4060c2a
